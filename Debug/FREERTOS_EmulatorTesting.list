
FREERTOS_EmulatorTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007050  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007338  08007338  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000154cc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200154dc  200154dc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001836e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003374  00000000  00000000  000383ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  0003cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e8d  00000000  00000000  0003e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e53  00000000  00000000  0005ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdad0  00000000  00000000  00077d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145830  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a2c  00000000  00000000  00145880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071c8 	.word	0x080071c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080071c8 	.word	0x080071c8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f08 	.word	0x20012f08

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
   DWT_CTRL |= (1<<0);
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <main+0x68>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <main+0x68>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fa8f 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f86d 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8ff 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8d3 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 800058a:	f005 f8d5 	bl	8005738 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800058e:	f006 f805 	bl	800659c <SEGGER_SYSVIEW_Start>

  HAL_UART_Transmit(&huart2,"RTOS\r\n",6,HAL_MAX_DELAY);
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	2206      	movs	r2, #6
 8000598:	490e      	ldr	r1, [pc, #56]	; (80005d4 <main+0x6c>)
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <main+0x70>)
 800059c:	f001 fd55 	bl	800204a <HAL_UART_Transmit>
  /*Create Two Tasks */
  xTaskCreate(vTask1_Handler,"Task-1",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler1);
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <main+0x74>)
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	2282      	movs	r2, #130	; 0x82
 80005ac:	490c      	ldr	r1, [pc, #48]	; (80005e0 <main+0x78>)
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <main+0x7c>)
 80005b0:	f003 faec 	bl	8003b8c <xTaskCreate>
  xTaskCreate(vTask2_Handler,"Task-2",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler2);
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x80>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2282      	movs	r2, #130	; 0x82
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <main+0x84>)
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <main+0x88>)
 80005c4:	f003 fae2 	bl	8003b8c <xTaskCreate>

  /*Start Scheduler */
  vTaskStartScheduler();
 80005c8:	f003 fc42 	bl	8003e50 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x64>
 80005ce:	bf00      	nop
 80005d0:	e0001000 	.word	0xe0001000
 80005d4:	080071e0 	.word	0x080071e0
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	20000070 	.word	0x20000070
 80005e0:	080071e8 	.word	0x080071e8
 80005e4:	080005f5 	.word	0x080005f5
 80005e8:	20000074 	.word	0x20000074
 80005ec:	080071f0 	.word	0x080071f0
 80005f0:	08000629 	.word	0x08000629

080005f4 <vTask1_Handler>:
  /* USER CODE END 3 */
}


void vTask1_Handler(void *pvParameters)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart2,"Hello world from task-1\r\n", 27,HAL_MAX_DELAY);
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	221b      	movs	r2, #27
 8000602:	4906      	ldr	r1, [pc, #24]	; (800061c <vTask1_Handler+0x28>)
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <vTask1_Handler+0x2c>)
 8000606:	f001 fd20 	bl	800204a <HAL_UART_Transmit>
		taskYIELD();
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <vTask1_Handler+0x30>)
 800060c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	f3bf 8f6f 	isb	sy
		HAL_UART_Transmit(&huart2,"Hello world from task-1\r\n", 27,HAL_MAX_DELAY);
 800061a:	e7ef      	b.n	80005fc <vTask1_Handler+0x8>
 800061c:	080071f8 	.word	0x080071f8
 8000620:	2000002c 	.word	0x2000002c
 8000624:	e000ed04 	.word	0xe000ed04

08000628 <vTask2_Handler>:
	}
}

void vTask2_Handler(void *pvParameter)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart2,"Hello world from task-2\r\n",27,HAL_MAX_DELAY);
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	221b      	movs	r2, #27
 8000636:	4906      	ldr	r1, [pc, #24]	; (8000650 <vTask2_Handler+0x28>)
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <vTask2_Handler+0x2c>)
 800063a:	f001 fd06 	bl	800204a <HAL_UART_Transmit>
		taskYIELD();
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <vTask2_Handler+0x30>)
 8000640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	f3bf 8f6f 	isb	sy
		HAL_UART_Transmit(&huart2,"Hello world from task-2\r\n",27,HAL_MAX_DELAY);
 800064e:	e7ef      	b.n	8000630 <vTask2_Handler+0x8>
 8000650:	08007214 	.word	0x08007214
 8000654:	2000002c 	.word	0x2000002c
 8000658:	e000ed04 	.word	0xe000ed04

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fda4 	bl	80071b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fd2d 	bl	8001140 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f876 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff8e 	bl	8001630 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f85f 	bl	80007dc <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fc22 	bl	8001fb0 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f833 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000002c 	.word	0x2000002c
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_GPIO_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <MX_GPIO_Init+0x30>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_GPIO_Init+0x30>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ca:	f000 f989 	bl	8000ae0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40000800 	.word	0x40000800

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <HAL_UART_MspInit+0x94>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d133      	bne.n	80008c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_UART_MspInit+0x98>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <HAL_UART_MspInit+0x98>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0x98>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_UART_MspInit+0x98>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0x98>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_UART_MspInit+0x98>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <HAL_UART_MspInit+0x9c>)
 80008ae:	f000 faab 	bl	8000e08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2026      	movs	r0, #38	; 0x26
 80008b8:	f000 f9ea 	bl	8000c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008bc:	2026      	movs	r0, #38	; 0x26
 80008be:	f000 fa03 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <HAL_InitTick+0xe4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a32      	ldr	r2, [pc, #200]	; (80009bc <HAL_InitTick+0xe4>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b30      	ldr	r3, [pc, #192]	; (80009bc <HAL_InitTick+0xe4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 0210 	add.w	r2, r7, #16
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f86e 	bl	80019f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091e:	f001 f83f 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8000922:	6378      	str	r0, [r7, #52]	; 0x34
 8000924:	e004      	b.n	8000930 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000926:	f001 f83b 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 800092a:	4603      	mov	r3, r0
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_InitTick+0xe8>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	0c9b      	lsrs	r3, r3, #18
 800093a:	3b01      	subs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_InitTick+0xec>)
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <HAL_InitTick+0xf0>)
 8000942:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_InitTick+0xec>)
 8000946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_InitTick+0xec>)
 800094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000950:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_InitTick+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_InitTick+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_InitTick+0xec>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <HAL_InitTick+0xec>)
 8000966:	f001 f875 	bl	8001a54 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11b      	bne.n	80009b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <HAL_InitTick+0xec>)
 800097a:	f001 f8c5 	bl	8001b08 <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000988:	2b00      	cmp	r3, #0
 800098a:	d111      	bne.n	80009b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800098c:	201e      	movs	r0, #30
 800098e:	f000 f99b 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d808      	bhi.n	80009aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	201e      	movs	r0, #30
 800099e:	f000 f977 	bl	8000c90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_InitTick+0xf4>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e002      	b.n	80009b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	20000078 	.word	0x20000078
 80009c8:	40000800 	.word	0x40000800
 80009cc:	20000004 	.word	0x20000004

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM4_IRQHandler+0x10>)
 8000a02:	f001 f8f1 	bl	8001be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000078 	.word	0x20000078

08000a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART2_IRQHandler+0x10>)
 8000a16:	f001 fbab 	bl	8002170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000002c 	.word	0x2000002c

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4e:	490e      	ldr	r1, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a64:	4c0b      	ldr	r4, [pc, #44]	; (8000a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a72:	f7ff ffd7 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f006 fb5d 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fd75 	bl	8000568 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a8c:	08007340 	.word	0x08007340
  ldr r2, =_sbss
 8000a90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a94:	200154dc 	.word	0x200154dc

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f8d8 	bl	8000c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f7ff ff04 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fe8a 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200000c0 	.word	0x200000c0

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000c0 	.word	0x200000c0

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff4c 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca2:	f7ff ff61 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000ca6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f7ff ffb1 	bl	8000c14 <NVIC_EncodePriority>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff80 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff54 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cf2:	f7ff ff09 	bl	8000b08 <HAL_GetTick>
 8000cf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d008      	beq.n	8000d16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e052      	b.n	8000dbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0216 	bic.w	r2, r2, #22
 8000d24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d103      	bne.n	8000d46 <HAL_DMA_Abort+0x62>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0208 	bic.w	r2, r2, #8
 8000d54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0201 	bic.w	r2, r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d66:	e013      	b.n	8000d90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d68:	f7ff fece 	bl	8000b08 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b05      	cmp	r3, #5
 8000d74:	d90c      	bls.n	8000d90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2220      	movs	r2, #32
 8000d7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e015      	b.n	8000dbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1e4      	bne.n	8000d68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da2:	223f      	movs	r2, #63	; 0x3f
 8000da4:	409a      	lsls	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d004      	beq.n	8000de2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00c      	b.n	8000dfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e16b      	b.n	80010fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 815a 	bne.w	80010f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d130      	bne.n	8000ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80b4 	beq.w	80010f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b60      	ldr	r3, [pc, #384]	; (8001114 <HAL_GPIO_Init+0x30c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a5f      	ldr	r2, [pc, #380]	; (8001114 <HAL_GPIO_Init+0x30c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <HAL_GPIO_Init+0x30c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a5b      	ldr	r2, [pc, #364]	; (8001118 <HAL_GPIO_Init+0x310>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <HAL_GPIO_Init+0x314>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d02b      	beq.n	800102e <HAL_GPIO_Init+0x226>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <HAL_GPIO_Init+0x318>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d025      	beq.n	800102a <HAL_GPIO_Init+0x222>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a50      	ldr	r2, [pc, #320]	; (8001124 <HAL_GPIO_Init+0x31c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d01f      	beq.n	8001026 <HAL_GPIO_Init+0x21e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <HAL_GPIO_Init+0x320>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d019      	beq.n	8001022 <HAL_GPIO_Init+0x21a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	; (800112c <HAL_GPIO_Init+0x324>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x216>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	; (8001130 <HAL_GPIO_Init+0x328>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x212>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_GPIO_Init+0x32c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x20e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <HAL_GPIO_Init+0x330>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x20a>
 800100e:	2307      	movs	r3, #7
 8001010:	e00e      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001012:	2308      	movs	r3, #8
 8001014:	e00c      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001016:	2306      	movs	r3, #6
 8001018:	e00a      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800101a:	2305      	movs	r3, #5
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800101e:	2304      	movs	r3, #4
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	; (8001118 <HAL_GPIO_Init+0x310>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_GPIO_Init+0x334>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a32      	ldr	r2, [pc, #200]	; (800113c <HAL_GPIO_Init+0x334>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_GPIO_Init+0x334>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <HAL_GPIO_Init+0x334>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_GPIO_Init+0x334>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_GPIO_Init+0x334>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_GPIO_Init+0x334>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_GPIO_Init+0x334>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f ae90 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40021400 	.word	0x40021400
 8001134:	40021800 	.word	0x40021800
 8001138:	40021c00 	.word	0x40021c00
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e267      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00c      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4b85      	ldr	r3, [pc, #532]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	2b08      	cmp	r3, #8
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b82      	ldr	r3, [pc, #520]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e242      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b76      	ldr	r3, [pc, #472]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a75      	ldr	r2, [pc, #468]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b70      	ldr	r3, [pc, #448]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6f      	ldr	r2, [pc, #444]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6c      	ldr	r2, [pc, #432]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a68      	ldr	r2, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b66      	ldr	r3, [pc, #408]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a65      	ldr	r2, [pc, #404]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc86 	bl	8000b08 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc82 	bl	8000b08 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e207      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fc72 	bl	8000b08 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fc6e 	bl	8000b08 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1f3      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b51      	ldr	r3, [pc, #324]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1c7      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4937      	ldr	r1, [pc, #220]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_RCC_OscConfig+0x244>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fc27 	bl	8000b08 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fc23 	bl	8000b08 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e1a8      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4925      	ldr	r1, [pc, #148]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_RCC_OscConfig+0x244>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc06 	bl	8000b08 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc02 	bl	8000b08 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e187      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d036      	beq.n	8001398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_RCC_OscConfig+0x248>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fbe6 	bl	8000b08 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fbe2 	bl	8000b08 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e167      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x240>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
 800135e:	e01b      	b.n	8001398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_OscConfig+0x248>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fbcf 	bl	8000b08 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e00e      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fbcb 	bl	8000b08 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d907      	bls.n	800138c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e150      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
 8001380:	40023800 	.word	0x40023800
 8001384:	42470000 	.word	0x42470000
 8001388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1ea      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8097 	beq.w	80014d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a7c      	ldr	r2, [pc, #496]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <HAL_RCC_OscConfig+0x474>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d118      	bne.n	8001414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <HAL_RCC_OscConfig+0x474>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a73      	ldr	r2, [pc, #460]	; (80015b4 <HAL_RCC_OscConfig+0x474>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb8b 	bl	8000b08 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fb87 	bl	8000b08 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e10c      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <HAL_RCC_OscConfig+0x474>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x2ea>
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a63      	ldr	r2, [pc, #396]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	e01c      	b.n	8001464 <HAL_RCC_OscConfig+0x324>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x30c>
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a5e      	ldr	r2, [pc, #376]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
 800143e:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a5b      	ldr	r2, [pc, #364]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0x324>
 800144c:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a57      	ldr	r2, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d015      	beq.n	8001498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fb4c 	bl	8000b08 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fb48 	bl	8000b08 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0cb      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0ee      	beq.n	8001474 <HAL_RCC_OscConfig+0x334>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fb36 	bl	8000b08 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb32 	bl	8000b08 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0b5      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ee      	bne.n	80014a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80a1 	beq.w	8001620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014de:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d05c      	beq.n	80015a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d141      	bne.n	8001576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_RCC_OscConfig+0x478>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb06 	bl	8000b08 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff fb02 	bl	8000b08 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e087      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69da      	ldr	r2, [r3, #28]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	3b01      	subs	r3, #1
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	491b      	ldr	r1, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_OscConfig+0x478>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fadb 	bl	8000b08 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fad7 	bl	8000b08 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e05c      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x416>
 8001574:	e054      	b.n	8001620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_RCC_OscConfig+0x478>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fac4 	bl	8000b08 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fac0 	bl	8000b08 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e045      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x444>
 80015a2:	e03d      	b.n	8001620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e038      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000
 80015b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d028      	beq.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d121      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d11a      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ec:	4013      	ands	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d111      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	3b01      	subs	r3, #1
 8001606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0cc      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d90c      	bls.n	800166c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800168e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d044      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d119      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e067      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4934      	ldr	r1, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff f9f2 	bl	8000b08 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f9ee 	bl	8000b08 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e04f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20c      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f87e 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	08007304 	.word	0x08007304
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001800:	b090      	sub	sp, #64	; 0x40
 8001802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d00d      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x40>
 8001820:	2b08      	cmp	r3, #8
 8001822:	f200 80a1 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x16c>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x34>
 800182a:	2b04      	cmp	r3, #4
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x3a>
 800182e:	e09b      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_GetSysClockFreq+0x184>)
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001834:	e09b      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_GetSysClockFreq+0x188>)
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800183a:	e098      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d028      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	2200      	movs	r2, #0
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	627a      	str	r2, [r7, #36]	; 0x24
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001864:	2100      	movs	r1, #0
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_GetSysClockFreq+0x188>)
 8001868:	fb03 f201 	mul.w	r2, r3, r1
 800186c:	2300      	movs	r3, #0
 800186e:	fb00 f303 	mul.w	r3, r0, r3
 8001872:	4413      	add	r3, r2
 8001874:	4a43      	ldr	r2, [pc, #268]	; (8001984 <HAL_RCC_GetSysClockFreq+0x188>)
 8001876:	fba0 1202 	umull	r1, r2, r0, r2
 800187a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800187c:	460a      	mov	r2, r1
 800187e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001882:	4413      	add	r3, r2
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	2200      	movs	r2, #0
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	61fa      	str	r2, [r7, #28]
 800188e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001892:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001896:	f7fe fce5 	bl	8000264 <__aeabi_uldivmod>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4613      	mov	r3, r2
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a2:	e053      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a4:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	2200      	movs	r2, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	617a      	str	r2, [r7, #20]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018b6:	f04f 0b00 	mov.w	fp, #0
 80018ba:	4652      	mov	r2, sl
 80018bc:	465b      	mov	r3, fp
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0159      	lsls	r1, r3, #5
 80018c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018cc:	0150      	lsls	r0, r2, #5
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	ebb2 080a 	subs.w	r8, r2, sl
 80018d6:	eb63 090b 	sbc.w	r9, r3, fp
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018ee:	ebb2 0408 	subs.w	r4, r2, r8
 80018f2:	eb63 0509 	sbc.w	r5, r3, r9
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	00eb      	lsls	r3, r5, #3
 8001900:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001904:	00e2      	lsls	r2, r4, #3
 8001906:	4614      	mov	r4, r2
 8001908:	461d      	mov	r5, r3
 800190a:	eb14 030a 	adds.w	r3, r4, sl
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	eb45 030b 	adc.w	r3, r5, fp
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	2200      	movs	r2, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	60fa      	str	r2, [r7, #12]
 800193c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001940:	f7fe fc90 	bl	8000264 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800195c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetSysClockFreq+0x184>)
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001970:	4618      	mov	r0, r3
 8001972:	3740      	adds	r7, #64	; 0x40
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	017d7840 	.word	0x017d7840

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08007314 	.word	0x08007314

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019cc:	f7ff ffdc 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08007314 	.word	0x08007314

080019f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	220f      	movs	r2, #15
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_RCC_GetClockConfig+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0207 	and.w	r2, r3, #7
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f839 	bl	8001af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f9d8 	bl	8001e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e04e      	b.n	8001bbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4a:	d01d      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d018      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x80>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d111      	bne.n	8001bac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d010      	beq.n	8001bbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001baa:	e007      	b.n	8001bbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40000800 	.word	0x40000800
 8001bd8:	40000c00 	.word	0x40000c00
 8001bdc:	40010400 	.word	0x40010400
 8001be0:	40014000 	.word	0x40014000
 8001be4:	40001800 	.word	0x40001800

08001be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d122      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d11b      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0202 	mvn.w	r2, #2
 8001c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8ee 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001c30:	e005      	b.n	8001c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8e0 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f8f1 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d122      	bne.n	8001c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d11b      	bne.n	8001c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0204 	mvn.w	r2, #4
 8001c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8c4 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8b6 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8c7 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d122      	bne.n	8001cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d11b      	bne.n	8001cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0208 	mvn.w	r2, #8
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f89a 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f88c 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f89d 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b10      	cmp	r3, #16
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0210 	mvn.w	r2, #16
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2208      	movs	r2, #8
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f870 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f862 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f873 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0201 	mvn.w	r2, #1
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fd26 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b80      	cmp	r3, #128	; 0x80
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f902 	bl	8001f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b40      	cmp	r3, #64	; 0x40
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f838 	bl	8001e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0220 	mvn.w	r2, #32
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8cc 	bl	8001f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a40      	ldr	r2, [pc, #256]	; (8001f5c <TIM_Base_SetConfig+0x114>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e66:	d00f      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <TIM_Base_SetConfig+0x118>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00b      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <TIM_Base_SetConfig+0x11c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <TIM_Base_SetConfig+0x120>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <TIM_Base_SetConfig+0x124>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d108      	bne.n	8001e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	; (8001f5c <TIM_Base_SetConfig+0x114>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02b      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d027      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2c      	ldr	r2, [pc, #176]	; (8001f60 <TIM_Base_SetConfig+0x118>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d023      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <TIM_Base_SetConfig+0x11c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <TIM_Base_SetConfig+0x120>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01b      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <TIM_Base_SetConfig+0x124>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d017      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <TIM_Base_SetConfig+0x128>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <TIM_Base_SetConfig+0x12c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00f      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <TIM_Base_SetConfig+0x130>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00b      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a25      	ldr	r2, [pc, #148]	; (8001f7c <TIM_Base_SetConfig+0x134>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <TIM_Base_SetConfig+0x138>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d003      	beq.n	8001efa <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <TIM_Base_SetConfig+0x13c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <TIM_Base_SetConfig+0x114>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0xf8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <TIM_Base_SetConfig+0x124>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d103      	bne.n	8001f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	615a      	str	r2, [r3, #20]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800
 8001f68:	40000c00 	.word	0x40000c00
 8001f6c:	40010400 	.word	0x40010400
 8001f70:	40014000 	.word	0x40014000
 8001f74:	40014400 	.word	0x40014400
 8001f78:	40014800 	.word	0x40014800
 8001f7c:	40001800 	.word	0x40001800
 8001f80:	40001c00 	.word	0x40001c00
 8001f84:	40002000 	.word	0x40002000

08001f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e03f      	b.n	8002042 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fc2e 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fd7b 	bl	8002af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	; 0x28
 800204e:	af02      	add	r7, sp, #8
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	d17c      	bne.n	8002164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_UART_Transmit+0x2c>
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e075      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_UART_Transmit+0x3e>
 8002084:	2302      	movs	r3, #2
 8002086:	e06e      	b.n	8002166 <HAL_UART_Transmit+0x11c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800209e:	f7fe fd33 	bl	8000b08 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d108      	bne.n	80020cc <HAL_UART_Transmit+0x82>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020dc:	e02a      	b.n	8002134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 faf9 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e036      	b.n	8002166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800210c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3302      	adds	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e007      	b.n	8002126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1cf      	bne.n	80020de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fac9 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0ba      	sub	sp, #232	; 0xe8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_UART_IRQHandler+0x66>
 80021c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fbd3 	bl	800297a <UART_Receive_IT>
      return;
 80021d4:	e256      	b.n	8002684 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80de 	beq.w	800239c <HAL_UART_IRQHandler+0x22c>
 80021e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80d1 	beq.w	800239c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_UART_IRQHandler+0xae>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_UART_IRQHandler+0xd2>
 800222a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0202 	orr.w	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_UART_IRQHandler+0xf6>
 800224e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0204 	orr.w	r2, r3, #4
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d011      	beq.n	8002296 <HAL_UART_IRQHandler+0x126>
 8002272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800227e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0208 	orr.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 81ed 	beq.w	800267a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_UART_IRQHandler+0x14e>
 80022ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb5e 	bl	800297a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_UART_IRQHandler+0x17a>
 80022e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d04f      	beq.n	800238a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fa66 	bl	80027bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d141      	bne.n	8002382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3314      	adds	r3, #20
 8002304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800231c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800232a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800232e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800233a:	e841 2300 	strex	r3, r2, [r1]
 800233e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1d9      	bne.n	80022fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	2b00      	cmp	r3, #0
 8002350:	d013      	beq.n	800237a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	4a7d      	ldr	r2, [pc, #500]	; (800254c <HAL_UART_IRQHandler+0x3dc>)
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fd30 	bl	8000dc4 <HAL_DMA_Abort_IT>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002374:	4610      	mov	r0, r2
 8002376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	e00e      	b.n	8002398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f99a 	bl	80026b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002380:	e00a      	b.n	8002398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f996 	bl	80026b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002388:	e006      	b.n	8002398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f992 	bl	80026b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002396:	e170      	b.n	800267a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	bf00      	nop
    return;
 800239a:	e16e      	b.n	800267a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 814a 	bne.w	800263a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8143 	beq.w	800263a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 813c 	beq.w	800263a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	f040 80b4 	bne.w	8002550 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8140 	beq.w	800267e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002406:	429a      	cmp	r2, r3
 8002408:	f080 8139 	bcs.w	800267e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002412:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241e:	f000 8088 	beq.w	8002532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800243c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800244e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800245a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1d9      	bne.n	8002422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3314      	adds	r3, #20
 8002474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002478:	e853 3f00 	ldrex	r3, [r3]
 800247c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800247e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3314      	adds	r3, #20
 800248e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800249a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800249e:	e841 2300 	strex	r3, r2, [r1]
 80024a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1e1      	bne.n	800246e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3314      	adds	r3, #20
 80024b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80024dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e3      	bne.n	80024aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fa:	e853 3f00 	ldrex	r3, [r3]
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	f023 0310 	bic.w	r3, r3, #16
 8002506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002514:	65ba      	str	r2, [r7, #88]	; 0x58
 8002516:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800251a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800251c:	e841 2300 	strex	r3, r2, [r1]
 8002520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e3      	bne.n	80024f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fbd9 	bl	8000ce4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800253a:	b29b      	uxth	r3, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b29b      	uxth	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8c0 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002548:	e099      	b.n	800267e <HAL_UART_IRQHandler+0x50e>
 800254a:	bf00      	nop
 800254c:	08002883 	.word	0x08002883
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002558:	b29b      	uxth	r3, r3
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 808b 	beq.w	8002682 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800256c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8086 	beq.w	8002682 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	e853 3f00 	ldrex	r3, [r3]
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800258c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800259a:	647a      	str	r2, [r7, #68]	; 0x44
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e3      	bne.n	8002576 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	623b      	str	r3, [r7, #32]
   return(result);
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3314      	adds	r3, #20
 80025ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025d2:	633a      	str	r2, [r7, #48]	; 0x30
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e3      	bne.n	80025ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	e853 3f00 	ldrex	r3, [r3]
 8002602:	60fb      	str	r3, [r7, #12]
   return(result);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0310 	bic.w	r3, r3, #16
 800260a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002618:	61fa      	str	r2, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	69b9      	ldr	r1, [r7, #24]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	e841 2300 	strex	r3, r2, [r1]
 8002624:	617b      	str	r3, [r7, #20]
   return(result);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e3      	bne.n	80025f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800262c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f848 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002638:	e023      	b.n	8002682 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800263a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_UART_IRQHandler+0x4ea>
 8002646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f929 	bl	80028aa <UART_Transmit_IT>
    return;
 8002658:	e014      	b.n	8002684 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00e      	beq.n	8002684 <HAL_UART_IRQHandler+0x514>
 8002666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f969 	bl	800294a <UART_EndTransmit_IT>
    return;
 8002678:	e004      	b.n	8002684 <HAL_UART_IRQHandler+0x514>
    return;
 800267a:	bf00      	nop
 800267c:	e002      	b.n	8002684 <HAL_UART_IRQHandler+0x514>
      return;
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <HAL_UART_IRQHandler+0x514>
      return;
 8002682:	bf00      	nop
  }
}
 8002684:	37e8      	adds	r7, #232	; 0xe8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop

0800268c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b090      	sub	sp, #64	; 0x40
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f0:	e050      	b.n	8002794 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d04c      	beq.n	8002794 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <UART_WaitOnFlagUntilTimeout+0x30>
 8002700:	f7fe fa02 	bl	8000b08 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270c:	429a      	cmp	r2, r3
 800270e:	d241      	bcs.n	8002794 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	e853 3f00 	ldrex	r3, [r3]
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002730:	637a      	str	r2, [r7, #52]	; 0x34
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002738:	e841 2300 	strex	r3, r2, [r1]
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e5      	bne.n	8002710 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3314      	adds	r3, #20
 800274a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	e853 3f00 	ldrex	r3, [r3]
 8002752:	613b      	str	r3, [r7, #16]
   return(result);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002764:	623a      	str	r2, [r7, #32]
 8002766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002768:	69f9      	ldr	r1, [r7, #28]
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	61bb      	str	r3, [r7, #24]
   return(result);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e5      	bne.n	8002744 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e00f      	b.n	80027b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d09f      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3740      	adds	r7, #64	; 0x40
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027bc:	b480      	push	{r7}
 80027be:	b095      	sub	sp, #84	; 0x54
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e4:	643a      	str	r2, [r7, #64]	; 0x40
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e5      	bne.n	80027c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	e853 3f00 	ldrex	r3, [r3]
 8002806:	61fb      	str	r3, [r7, #28]
   return(result);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3314      	adds	r3, #20
 8002816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800281e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002820:	e841 2300 	strex	r3, r2, [r1]
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e5      	bne.n	80027f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	2b01      	cmp	r3, #1
 8002832:	d119      	bne.n	8002868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	60bb      	str	r3, [r7, #8]
   return(result);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002854:	61ba      	str	r2, [r7, #24]
 8002856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	6979      	ldr	r1, [r7, #20]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	e841 2300 	strex	r3, r2, [r1]
 8002860:	613b      	str	r3, [r7, #16]
   return(result);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e5      	bne.n	8002834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002876:	bf00      	nop
 8002878:	3754      	adds	r7, #84	; 0x54
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff ff09 	bl	80026b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b21      	cmp	r3, #33	; 0x21
 80028bc:	d13e      	bne.n	800293c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	d114      	bne.n	80028f2 <UART_Transmit_IT+0x48>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d110      	bne.n	80028f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	e008      	b.n	8002904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6211      	str	r1, [r2, #32]
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe8e 	bl	800268c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08c      	sub	sp, #48	; 0x30
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b22      	cmp	r3, #34	; 0x22
 800298c:	f040 80ab 	bne.w	8002ae6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002998:	d117      	bne.n	80029ca <UART_Receive_IT+0x50>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d113      	bne.n	80029ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	1c9a      	adds	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
 80029c8:	e026      	b.n	8002a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d007      	beq.n	80029ee <UART_Receive_IT+0x74>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <UART_Receive_IT+0x82>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e008      	b.n	8002a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d15a      	bne.n	8002ae2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0220 	bic.w	r2, r2, #32
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d135      	bne.n	8002ad8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	613b      	str	r3, [r7, #16]
   return(result);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f023 0310 	bic.w	r3, r3, #16
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a92:	623a      	str	r2, [r7, #32]
 8002a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	69f9      	ldr	r1, [r7, #28]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e5      	bne.n	8002a72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d10a      	bne.n	8002aca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fdf9 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
 8002ad6:	e002      	b.n	8002ade <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fde1 	bl	80026a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e002      	b.n	8002ae8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b0c0      	sub	sp, #256	; 0x100
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	ea40 0301 	orr.w	r3, r0, r1
 8002b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b48:	f021 010c 	bic.w	r1, r1, #12
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b56:	430b      	orrs	r3, r1
 8002b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	6999      	ldr	r1, [r3, #24]
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	ea40 0301 	orr.w	r3, r0, r1
 8002b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <UART_SetConfig+0x2cc>)
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d005      	beq.n	8002b90 <UART_SetConfig+0xa0>
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b8d      	ldr	r3, [pc, #564]	; (8002dc0 <UART_SetConfig+0x2d0>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d104      	bne.n	8002b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7fe ff1a 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 8002b94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b98:	e003      	b.n	8002ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9a:	f7fe ff01 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	f040 810c 	bne.w	8002dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	1891      	adds	r1, r2, r2
 8002bc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bca:	415b      	adcs	r3, r3
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	eb12 0801 	adds.w	r8, r2, r1
 8002bd8:	4629      	mov	r1, r5
 8002bda:	eb43 0901 	adc.w	r9, r3, r1
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	eb18 0303 	adds.w	r3, r8, r3
 8002bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c00:	462b      	mov	r3, r5
 8002c02:	eb49 0303 	adc.w	r3, r9, r3
 8002c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c1e:	460b      	mov	r3, r1
 8002c20:	18db      	adds	r3, r3, r3
 8002c22:	653b      	str	r3, [r7, #80]	; 0x50
 8002c24:	4613      	mov	r3, r2
 8002c26:	eb42 0303 	adc.w	r3, r2, r3
 8002c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c34:	f7fd fb16 	bl	8000264 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011c      	lsls	r4, r3, #4
 8002c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	1891      	adds	r1, r2, r2
 8002c5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c60:	415b      	adcs	r3, r3
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c68:	4641      	mov	r1, r8
 8002c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c6e:	4649      	mov	r1, r9
 8002c70:	eb43 0b01 	adc.w	fp, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c88:	4692      	mov	sl, r2
 8002c8a:	469b      	mov	fp, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c96:	464b      	mov	r3, r9
 8002c98:	eb4b 0303 	adc.w	r3, fp, r3
 8002c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cba:	4613      	mov	r3, r2
 8002cbc:	eb42 0303 	adc.w	r3, r2, r3
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cca:	f7fd facb 	bl	8000264 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	1acb      	subs	r3, r1, r3
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002cec:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cf8:	441c      	add	r4, r3
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d14:	415b      	adcs	r3, r3
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	1851      	adds	r1, r2, r1
 8002d20:	6339      	str	r1, [r7, #48]	; 0x30
 8002d22:	4649      	mov	r1, r9
 8002d24:	414b      	adcs	r3, r1
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d34:	4659      	mov	r1, fp
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4651      	mov	r1, sl
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4642      	mov	r2, r8
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d50:	464b      	mov	r3, r9
 8002d52:	460a      	mov	r2, r1
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d70:	460b      	mov	r3, r1
 8002d72:	18db      	adds	r3, r3, r3
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	4613      	mov	r3, r2
 8002d78:	eb42 0303 	adc.w	r3, r2, r3
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d86:	f7fd fa6d 	bl	8000264 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2164      	movs	r1, #100	; 0x64
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	3332      	adds	r3, #50	; 0x32
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	f003 0207 	and.w	r2, r3, #7
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4422      	add	r2, r4
 8002db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002db8:	e105      	b.n	8002fc6 <UART_SetConfig+0x4d6>
 8002dba:	bf00      	nop
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40011400 	.word	0x40011400
 8002dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dda:	4642      	mov	r2, r8
 8002ddc:	464b      	mov	r3, r9
 8002dde:	1891      	adds	r1, r2, r2
 8002de0:	6239      	str	r1, [r7, #32]
 8002de2:	415b      	adcs	r3, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dea:	4641      	mov	r1, r8
 8002dec:	1854      	adds	r4, r2, r1
 8002dee:	4649      	mov	r1, r9
 8002df0:	eb43 0501 	adc.w	r5, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	00eb      	lsls	r3, r5, #3
 8002dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e02:	00e2      	lsls	r2, r4, #3
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	4643      	mov	r3, r8
 8002e0a:	18e3      	adds	r3, r4, r3
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e10:	464b      	mov	r3, r9
 8002e12:	eb45 0303 	adc.w	r3, r5, r3
 8002e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e36:	4629      	mov	r1, r5
 8002e38:	008b      	lsls	r3, r1, #2
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e40:	4621      	mov	r1, r4
 8002e42:	008a      	lsls	r2, r1, #2
 8002e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e48:	f7fd fa0c 	bl	8000264 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002e52:	fba3 2302 	umull	r2, r3, r3, r2
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	011c      	lsls	r4, r3, #4
 8002e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	1891      	adds	r1, r2, r2
 8002e72:	61b9      	str	r1, [r7, #24]
 8002e74:	415b      	adcs	r3, r3
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	1851      	adds	r1, r2, r1
 8002e80:	6139      	str	r1, [r7, #16]
 8002e82:	4649      	mov	r1, r9
 8002e84:	414b      	adcs	r3, r1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e94:	4659      	mov	r1, fp
 8002e96:	00cb      	lsls	r3, r1, #3
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	00ca      	lsls	r2, r1, #3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ee6:	f7fd f9bd 	bl	8000264 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	; 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	3332      	adds	r3, #50	; 0x32
 8002f02:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0e:	441c      	add	r4, r3
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	673b      	str	r3, [r7, #112]	; 0x70
 8002f18:	677a      	str	r2, [r7, #116]	; 0x74
 8002f1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1851      	adds	r1, r2, r1
 8002f32:	6039      	str	r1, [r7, #0]
 8002f34:	4649      	mov	r1, r9
 8002f36:	414b      	adcs	r3, r1
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f46:	4659      	mov	r1, fp
 8002f48:	00cb      	lsls	r3, r1, #3
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f50:	4651      	mov	r1, sl
 8002f52:	00ca      	lsls	r2, r1, #3
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4642      	mov	r2, r8
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f60:	464b      	mov	r3, r9
 8002f62:	460a      	mov	r2, r1
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	663b      	str	r3, [r7, #96]	; 0x60
 8002f74:	667a      	str	r2, [r7, #100]	; 0x64
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f82:	4649      	mov	r1, r9
 8002f84:	008b      	lsls	r3, r1, #2
 8002f86:	4641      	mov	r1, r8
 8002f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	008a      	lsls	r2, r1, #2
 8002f90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f94:	f7fd f966 	bl	8000264 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2164      	movs	r1, #100	; 0x64
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	3332      	adds	r3, #50	; 0x32
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4422      	add	r2, r4
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	51eb851f 	.word	0x51eb851f

08002fd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f103 0208 	add.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f103 0208 	add.w	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f103 0208 	add.w	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d103      	bne.n	800309a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e00c      	b.n	80030b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3308      	adds	r3, #8
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e002      	b.n	80030a8 <vListInsert+0x2e>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d2f6      	bcs.n	80030a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6852      	ldr	r2, [r2, #4]
 800310c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d103      	bne.n	8003120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800316a:	f001 ffd3 	bl	8005114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	441a      	add	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	3b01      	subs	r3, #1
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	441a      	add	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d114      	bne.n	80031ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01a      	beq.n	80031fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3310      	adds	r3, #16
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f8e5 	bl	800439c <xTaskRemoveFromEventList>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <xQueueGenericReset+0xcc>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	e009      	b.n	80031fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3310      	adds	r3, #16
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fef2 	bl	8002fd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3324      	adds	r3, #36	; 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff feed 	bl	8002fd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031fe:	f001 ffb9 	bl	8005174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003202:	2301      	movs	r3, #1
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	613b      	str	r3, [r7, #16]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	e004      	b.n	8003250 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3350      	adds	r3, #80	; 0x50
 8003254:	4618      	mov	r0, r3
 8003256:	f002 f887 	bl	8005368 <pvPortMalloc>
 800325a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	3350      	adds	r3, #80	; 0x50
 800326a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800326c:	79fa      	ldrb	r2, [r7, #7]
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f805 	bl	8003288 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800327e:	69bb      	ldr	r3, [r7, #24]
	}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d103      	bne.n	80032a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e002      	b.n	80032aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032b6:	2101      	movs	r1, #1
 80032b8:	69b8      	ldr	r0, [r7, #24]
 80032ba:	f7ff ff41 	bl	8003140 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	2073      	movs	r0, #115	; 0x73
 80032ce:	f003 f85d 	bl	800638c <SEGGER_SYSVIEW_RecordU32x3>
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b090      	sub	sp, #64	; 0x40
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xQueueGenericSend+0x32>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <xQueueGenericSend+0x40>
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <xQueueGenericSend+0x44>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <xQueueGenericSend+0x46>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <xQueueGenericSend+0x60>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d103      	bne.n	800334a <xQueueGenericSend+0x6e>
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <xQueueGenericSend+0x72>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueGenericSend+0x74>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueGenericSend+0x8e>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	623b      	str	r3, [r7, #32]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800336a:	f001 f9b7 	bl	80046dc <xTaskGetSchedulerState>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <xQueueGenericSend+0x9e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <xQueueGenericSend+0xa2>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <xQueueGenericSend+0xa4>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueGenericSend+0xbe>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	61fb      	str	r3, [r7, #28]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800339a:	f001 febb 	bl	8005114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <xQueueGenericSend+0xd4>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d136      	bne.n	800341e <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 fd76 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	4601      	mov	r1, r0
 80033c4:	205a      	movs	r0, #90	; 0x5a
 80033c6:	f003 f857 	bl	8006478 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033d0:	f000 fa66 	bl	80038a0 <prvCopyDataToQueue>
 80033d4:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d010      	beq.n	8003400 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	3324      	adds	r3, #36	; 0x24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ffda 	bl	800439c <xTaskRemoveFromEventList>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d013      	beq.n	8003416 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033ee:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <xQueueGenericSend+0x248>)
 80033f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	e00a      	b.n	8003416 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <xQueueGenericSend+0x248>)
 8003408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003416:	f001 fead 	bl	8005174 <vPortExitCritical>
				return pdPASS;
 800341a:	2301      	movs	r3, #1
 800341c:	e07d      	b.n	800351a <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d110      	bne.n	8003446 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003424:	f001 fea6 	bl	8005174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fd3a 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	460b      	mov	r3, r1
 800343a:	4601      	mov	r1, r0
 800343c:	205a      	movs	r0, #90	; 0x5a
 800343e:	f003 f81b 	bl	8006478 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003442:	2300      	movs	r3, #0
 8003444:	e069      	b.n	800351a <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4618      	mov	r0, r3
 8003452:	f001 f809 	bl	8004468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003456:	2301      	movs	r3, #1
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800345a:	f001 fe8b 	bl	8005174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800345e:	f000 fd55 	bl	8003f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003462:	f001 fe57 	bl	8005114 <vPortEnterCritical>
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800346c:	b25b      	sxtb	r3, r3
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d103      	bne.n	800347c <xQueueGenericSend+0x1a0>
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d103      	bne.n	8003492 <xQueueGenericSend+0x1b6>
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003492:	f001 fe6f 	bl	8005174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003496:	1d3a      	adds	r2, r7, #4
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fff8 	bl	8004494 <xTaskCheckForTimeOut>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d124      	bne.n	80034f4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ac:	f000 faf0 	bl	8003a90 <prvIsQueueFull>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	3310      	adds	r3, #16
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff1a 	bl	80042f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c6:	f000 fa7b 	bl	80039c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034ca:	f000 fd2d 	bl	8003f28 <xTaskResumeAll>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af62 	bne.w	800339a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <xQueueGenericSend+0x248>)
 80034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	e758      	b.n	800339a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ea:	f000 fa69 	bl	80039c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ee:	f000 fd1b 	bl	8003f28 <xTaskResumeAll>
 80034f2:	e752      	b.n	800339a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f6:	f000 fa63 	bl	80039c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034fa:	f000 fd15 	bl	8003f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fccf 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	460b      	mov	r3, r1
 8003510:	4601      	mov	r1, r0
 8003512:	205a      	movs	r0, #90	; 0x5a
 8003514:	f002 ffb0 	bl	8006478 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003518:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800351a:	4618      	mov	r0, r3
 800351c:	3738      	adds	r7, #56	; 0x38
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <xQueueGenericSendFromISR+0x3c>
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <xQueueGenericSendFromISR+0x40>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <xQueueGenericSendFromISR+0x42>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	623b      	str	r3, [r7, #32]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d103      	bne.n	8003592 <xQueueGenericSendFromISR+0x6a>
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <xQueueGenericSendFromISR+0x6e>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <xQueueGenericSendFromISR+0x70>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	61fb      	str	r3, [r7, #28]
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b2:	f001 fe99 	bl	80052e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035b6:	f3ef 8211 	mrs	r2, BASEPRI
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	61ba      	str	r2, [r7, #24]
 80035cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <xQueueGenericSendFromISR+0xbc>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d136      	bne.n	8003652 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 fc57 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 80035f6:	4601      	mov	r1, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	461a      	mov	r2, r3
 80035fc:	2060      	movs	r0, #96	; 0x60
 80035fe:	f002 fe6b 	bl	80062d8 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003608:	f000 f94a 	bl	80038a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800360c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d112      	bne.n	800363c <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	3324      	adds	r3, #36	; 0x24
 8003622:	4618      	mov	r0, r3
 8003624:	f000 feba 	bl	800439c <xTaskRemoveFromEventList>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800363c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003640:	3301      	adds	r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	b25a      	sxtb	r2, r3
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003650:	e00b      	b.n	800366a <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fc25 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 800365a:	4601      	mov	r1, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	461a      	mov	r2, r3
 8003660:	2060      	movs	r0, #96	; 0x60
 8003662:	f002 fe39 	bl	80062d8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003678:	4618      	mov	r0, r3
 800367a:	3738      	adds	r7, #56	; 0x38
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b08f      	sub	sp, #60	; 0x3c
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <xQueueReceive+0x30>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	623b      	str	r3, [r7, #32]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <xQueueReceive+0x3e>
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <xQueueReceive+0x42>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueReceive+0x44>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xQueueReceive+0x5e>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	61fb      	str	r3, [r7, #28]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036de:	f000 fffd 	bl	80046dc <xTaskGetSchedulerState>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <xQueueReceive+0x6e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <xQueueReceive+0x72>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueReceive+0x74>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueReceive+0x8e>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	61bb      	str	r3, [r7, #24]
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800370e:	f001 fd01 	bl	8005114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02f      	beq.n	800377e <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003722:	f000 f927 	bl	8003974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fbbb 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 800372e:	4604      	mov	r4, r0
 8003730:	2000      	movs	r0, #0
 8003732:	f003 fbb7 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003736:	4602      	mov	r2, r0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2101      	movs	r1, #1
 800373c:	9100      	str	r1, [sp, #0]
 800373e:	4621      	mov	r1, r4
 8003740:	205c      	movs	r0, #92	; 0x5c
 8003742:	f002 fe99 	bl	8006478 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	1e5a      	subs	r2, r3, #1
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00f      	beq.n	8003776 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	3310      	adds	r3, #16
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fe1e 	bl	800439c <xTaskRemoveFromEventList>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003766:	4b4d      	ldr	r3, [pc, #308]	; (800389c <xQueueReceive+0x21c>)
 8003768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003776:	f001 fcfd 	bl	8005174 <vPortExitCritical>
				return pdPASS;
 800377a:	2301      	movs	r3, #1
 800377c:	e08a      	b.n	8003894 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d113      	bne.n	80037ac <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003784:	f001 fcf6 	bl	8005174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	4618      	mov	r0, r3
 800378c:	f003 fb8a 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003790:	4604      	mov	r4, r0
 8003792:	2000      	movs	r0, #0
 8003794:	f003 fb86 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2101      	movs	r1, #1
 800379e:	9100      	str	r1, [sp, #0]
 80037a0:	4621      	mov	r1, r4
 80037a2:	205c      	movs	r0, #92	; 0x5c
 80037a4:	f002 fe68 	bl	8006478 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e073      	b.n	8003894 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b2:	f107 0310 	add.w	r3, r7, #16
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fe56 	bl	8004468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c0:	f001 fcd8 	bl	8005174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037c4:	f000 fba2 	bl	8003f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037c8:	f001 fca4 	bl	8005114 <vPortEnterCritical>
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d103      	bne.n	80037e2 <xQueueReceive+0x162>
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d103      	bne.n	80037f8 <xQueueReceive+0x178>
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f8:	f001 fcbc 	bl	8005174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fc:	1d3a      	adds	r2, r7, #4
 80037fe:	f107 0310 	add.w	r3, r7, #16
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fe45 	bl	8004494 <xTaskCheckForTimeOut>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d124      	bne.n	800385a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003812:	f000 f927 	bl	8003a64 <prvIsQueueEmpty>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fd67 	bl	80042f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800382a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382c:	f000 f8c8 	bl	80039c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003830:	f000 fb7a 	bl	8003f28 <xTaskResumeAll>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f af69 	bne.w	800370e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <xQueueReceive+0x21c>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	e75f      	b.n	800370e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800384e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003850:	f000 f8b6 	bl	80039c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003854:	f000 fb68 	bl	8003f28 <xTaskResumeAll>
 8003858:	e759      	b.n	800370e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 f8b0 	bl	80039c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003860:	f000 fb62 	bl	8003f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f8fd 	bl	8003a64 <prvIsQueueEmpty>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f43f af4e 	beq.w	800370e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	4618      	mov	r0, r3
 8003876:	f003 fb15 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 800387a:	4604      	mov	r4, r0
 800387c:	2000      	movs	r0, #0
 800387e:	f003 fb11 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2101      	movs	r1, #1
 8003888:	9100      	str	r1, [sp, #0]
 800388a:	4621      	mov	r1, r4
 800388c:	205c      	movs	r0, #92	; 0x5c
 800388e:	f002 fdf3 	bl	8006478 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003892:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003894:	4618      	mov	r0, r3
 8003896:	3734      	adds	r7, #52	; 0x34
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d14d      	bne.n	8003962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 ff24 	bl	8004718 <xTaskPriorityDisinherit>
 80038d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e043      	b.n	8003962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d119      	bne.n	8003914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6858      	ldr	r0, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	461a      	mov	r2, r3
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	f003 fc56 	bl	800719c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	441a      	add	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d32b      	bcc.n	8003962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e026      	b.n	8003962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68d8      	ldr	r0, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	461a      	mov	r2, r3
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	f003 fc3c 	bl	800719c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	425b      	negs	r3, r3
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d207      	bcs.n	8003950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	425b      	negs	r3, r3
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d105      	bne.n	8003962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	3b01      	subs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800396a:	697b      	ldr	r3, [r7, #20]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d303      	bcc.n	80039a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68d9      	ldr	r1, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	461a      	mov	r2, r3
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f003 fbf2 	bl	800719c <memcpy>
	}
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039c8:	f001 fba4 	bl	8005114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d4:	e011      	b.n	80039fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fcda 	bl	800439c <xTaskRemoveFromEventList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ee:	f000 fdb3 	bl	8004558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	dce9      	bgt.n	80039d6 <prvUnlockQueue+0x16>
 8003a02:	e000      	b.n	8003a06 <prvUnlockQueue+0x46>
					break;
 8003a04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	22ff      	movs	r2, #255	; 0xff
 8003a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a0e:	f001 fbb1 	bl	8005174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a12:	f001 fb7f 	bl	8005114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a1e:	e011      	b.n	8003a44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fcb5 	bl	800439c <xTaskRemoveFromEventList>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a38:	f000 fd8e 	bl	8004558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	dce9      	bgt.n	8003a20 <prvUnlockQueue+0x60>
 8003a4c:	e000      	b.n	8003a50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a58:	f001 fb8c 	bl	8005174 <vPortExitCritical>
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a6c:	f001 fb52 	bl	8005114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e001      	b.n	8003a82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a82:	f001 fb77 	bl	8005174 <vPortExitCritical>

	return xReturn;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a98:	f001 fb3c 	bl	8005114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d102      	bne.n	8003aae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e001      	b.n	8003ab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ab2:	f001 fb5f 	bl	8005174 <vPortExitCritical>

	return xReturn;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e01e      	b.n	8003b0e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <vQueueAddToRegistry+0x60>)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d115      	bne.n	8003b08 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003adc:	4910      	ldr	r1, [pc, #64]	; (8003b20 <vQueueAddToRegistry+0x60>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <vQueueAddToRegistry+0x60>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 f9d5 	bl	8006ea4 <SEGGER_SYSVIEW_ShrinkId>
 8003afa:	4601      	mov	r1, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	2071      	movs	r0, #113	; 0x71
 8003b02:	f002 fbe9 	bl	80062d8 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8003b06:	e006      	b.n	8003b16 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	d9dd      	bls.n	8003ad0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200000c4 	.word	0x200000c4

08003b24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b34:	f001 faee 	bl	8005114 <vPortEnterCritical>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d103      	bne.n	8003b4e <vQueueWaitForMessageRestricted+0x2a>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d103      	bne.n	8003b64 <vQueueWaitForMessageRestricted+0x40>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b64:	f001 fb06 	bl	8005174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3324      	adds	r3, #36	; 0x24
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fbe1 	bl	8004340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7ff ff1e 	bl	80039c0 <prvUnlockQueue>
	}
 8003b84:	bf00      	nop
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08c      	sub	sp, #48	; 0x30
 8003b90:	af04      	add	r7, sp, #16
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fbe1 	bl	8005368 <pvPortMalloc>
 8003ba6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bae:	2058      	movs	r0, #88	; 0x58
 8003bb0:	f001 fbda 	bl	8005368 <pvPortMalloc>
 8003bb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc2:	e005      	b.n	8003bd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bc4:	6978      	ldr	r0, [r7, #20]
 8003bc6:	f001 fc93 	bl	80054f0 <vPortFree>
 8003bca:	e001      	b.n	8003bd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9303      	str	r3, [sp, #12]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f80e 	bl	8003c0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bf2:	69f8      	ldr	r0, [r7, #28]
 8003bf4:	f000 f8a0 	bl	8003d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e002      	b.n	8003c04 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c04:	69bb      	ldr	r3, [r7, #24]
	}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b088      	sub	sp, #32
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <prvInitialiseNewTask+0x2a>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	617b      	str	r3, [r7, #20]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <prvInitialiseNewTask+0x28>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	461a      	mov	r2, r3
 8003c42:	21a5      	movs	r1, #165	; 0xa5
 8003c44:	f003 fab8 	bl	80071b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c52:	3b01      	subs	r3, #1
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <prvInitialiseNewTask+0x74>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	613b      	str	r3, [r7, #16]
}
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <prvInitialiseNewTask+0x72>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	e012      	b.n	8003cae <prvInitialiseNewTask+0xa0>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	7819      	ldrb	r1, [r3, #0]
 8003c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	3334      	adds	r3, #52	; 0x34
 8003c98:	460a      	mov	r2, r1
 8003c9a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <prvInitialiseNewTask+0xa8>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d9e9      	bls.n	8003c88 <prvInitialiseNewTask+0x7a>
 8003cb4:	e000      	b.n	8003cb8 <prvInitialiseNewTask+0xaa>
		{
			break;
 8003cb6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d901      	bls.n	8003cca <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2200      	movs	r2, #0
 8003cda:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f999 	bl	8003018 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	3318      	adds	r3, #24
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f994 	bl	8003018 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	f1c3 0205 	rsb	r2, r3, #5
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	69b8      	ldr	r0, [r7, #24]
 8003d1a:	f001 f8d1 	bl	8004ec0 <pxPortInitialiseStack>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d30:	bf00      	nop
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d40:	f001 f9e8 	bl	8005114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <prvAddNewTaskToReadyList+0xfc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a3a      	ldr	r2, [pc, #232]	; (8003e34 <prvAddNewTaskToReadyList+0xfc>)
 8003d4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d4e:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <prvAddNewTaskToReadyList+0x100>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d56:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <prvAddNewTaskToReadyList+0x100>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d5c:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <prvAddNewTaskToReadyList+0xfc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d110      	bne.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d64:	f000 fc1c 	bl	80045a0 <prvInitialiseTaskLists>
 8003d68:	e00d      	b.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <prvAddNewTaskToReadyList+0x104>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d72:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <prvAddNewTaskToReadyList+0x100>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d802      	bhi.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d80:	4a2d      	ldr	r2, [pc, #180]	; (8003e38 <prvAddNewTaskToReadyList+0x100>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <prvAddNewTaskToReadyList+0x108>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a2c      	ldr	r2, [pc, #176]	; (8003e40 <prvAddNewTaskToReadyList+0x108>)
 8003d8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <prvAddNewTaskToReadyList+0x108>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <prvAddNewTaskToReadyList+0x94>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f002 ff59 	bl	8006c58 <SEGGER_SYSVIEW_OnTaskCreate>
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	461d      	mov	r5, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	1ae3      	subs	r3, r4, r3
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	f001 fd58 	bl	800587c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f002 ffc6 	bl	8006d60 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <prvAddNewTaskToReadyList+0x10c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <prvAddNewTaskToReadyList+0x10c>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <prvAddNewTaskToReadyList+0x110>)
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7ff f918 	bl	8003032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e02:	f001 f9b7 	bl	8005174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <prvAddNewTaskToReadyList+0x104>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00e      	beq.n	8003e2c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <prvAddNewTaskToReadyList+0x100>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d207      	bcs.n	8003e2c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <prvAddNewTaskToReadyList+0x114>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bdb0      	pop	{r4, r5, r7, pc}
 8003e34:	200001dc 	.word	0x200001dc
 8003e38:	20000104 	.word	0x20000104
 8003e3c:	200001e8 	.word	0x200001e8
 8003e40:	200001f8 	.word	0x200001f8
 8003e44:	200001e4 	.word	0x200001e4
 8003e48:	20000108 	.word	0x20000108
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003e56:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <vTaskStartScheduler+0xa0>)
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2282      	movs	r2, #130	; 0x82
 8003e62:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <vTaskStartScheduler+0xa4>)
 8003e64:	4824      	ldr	r0, [pc, #144]	; (8003ef8 <vTaskStartScheduler+0xa8>)
 8003e66:	f7ff fe91 	bl	8003b8c <xTaskCreate>
 8003e6a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003e72:	f000 fd53 	bl	800491c <xTimerCreateTimerTask>
 8003e76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d124      	bne.n	8003ec8 <vTaskStartScheduler+0x78>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60bb      	str	r3, [r7, #8]
}
 8003e90:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e92:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <vTaskStartScheduler+0xac>)
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <vTaskStartScheduler+0xb0>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <vTaskStartScheduler+0xb4>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <vTaskStartScheduler+0xb8>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <vTaskStartScheduler+0xa0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d102      	bne.n	8003eb8 <vTaskStartScheduler+0x68>
 8003eb2:	f002 feb5 	bl	8006c20 <SEGGER_SYSVIEW_OnIdle>
 8003eb6:	e004      	b.n	8003ec2 <vTaskStartScheduler+0x72>
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <vTaskStartScheduler+0xb8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 ff0d 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ec2:	f001 f885 	bl	8004fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ec6:	e00e      	b.n	8003ee6 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d10a      	bne.n	8003ee6 <vTaskStartScheduler+0x96>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	607b      	str	r3, [r7, #4]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <vTaskStartScheduler+0x94>
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000200 	.word	0x20000200
 8003ef4:	08007230 	.word	0x08007230
 8003ef8:	08004571 	.word	0x08004571
 8003efc:	200001fc 	.word	0x200001fc
 8003f00:	200001e8 	.word	0x200001e8
 8003f04:	200001e0 	.word	0x200001e0
 8003f08:	20000104 	.word	0x20000104

08003f0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <vTaskSuspendAll+0x18>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a03      	ldr	r2, [pc, #12]	; (8003f24 <vTaskSuspendAll+0x18>)
 8003f18:	6013      	str	r3, [r2, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20000204 	.word	0x20000204

08003f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <xTaskResumeAll+0x11c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	603b      	str	r3, [r7, #0]
}
 8003f50:	bf00      	nop
 8003f52:	e7fe      	b.n	8003f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f54:	f001 f8de 	bl	8005114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f58:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <xTaskResumeAll+0x11c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4a39      	ldr	r2, [pc, #228]	; (8004044 <xTaskResumeAll+0x11c>)
 8003f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <xTaskResumeAll+0x11c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d165      	bne.n	8004036 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <xTaskResumeAll+0x120>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d061      	beq.n	8004036 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f72:	e032      	b.n	8003fda <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f74:	4b35      	ldr	r3, [pc, #212]	; (800404c <xTaskResumeAll+0x124>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3318      	adds	r3, #24
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff f8b3 	bl	80030ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f8ae 	bl	80030ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 fee4 	bl	8006d60 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <xTaskResumeAll+0x128>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	4a2a      	ldr	r2, [pc, #168]	; (8004050 <xTaskResumeAll+0x128>)
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a27      	ldr	r2, [pc, #156]	; (8004054 <xTaskResumeAll+0x12c>)
 8003fb8:	441a      	add	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f7ff f836 	bl	8003032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	4b23      	ldr	r3, [pc, #140]	; (8004058 <xTaskResumeAll+0x130>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <xTaskResumeAll+0x134>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <xTaskResumeAll+0x124>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1c8      	bne.n	8003f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fe8:	f000 fb58 	bl	800469c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <xTaskResumeAll+0x138>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ff8:	f000 f858 	bl	80040ac <xTaskIncrementTick>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004002:	4b16      	ldr	r3, [pc, #88]	; (800405c <xTaskResumeAll+0x134>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f1      	bne.n	8003ff8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <xTaskResumeAll+0x138>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <xTaskResumeAll+0x134>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <xTaskResumeAll+0x13c>)
 8004028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004036:	f001 f89d 	bl	8005174 <vPortExitCritical>

	return xAlreadyYielded;
 800403a:	68bb      	ldr	r3, [r7, #8]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000204 	.word	0x20000204
 8004048:	200001dc 	.word	0x200001dc
 800404c:	2000019c 	.word	0x2000019c
 8004050:	200001e4 	.word	0x200001e4
 8004054:	20000108 	.word	0x20000108
 8004058:	20000104 	.word	0x20000104
 800405c:	200001f0 	.word	0x200001f0
 8004060:	200001ec 	.word	0x200001ec
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <xTaskGetTickCount+0x1c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004074:	687b      	ldr	r3, [r7, #4]
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200001e0 	.word	0x200001e0

08004088 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800408e:	f001 f92b 	bl	80052e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <xTaskGetTickCountFromISR+0x20>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800409c:	683b      	ldr	r3, [r7, #0]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200001e0 	.word	0x200001e0

080040ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b6:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <xTaskIncrementTick+0x14c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 808c 	bne.w	80041d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040c0:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <xTaskIncrementTick+0x150>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040c8:	4a4c      	ldr	r2, [pc, #304]	; (80041fc <xTaskIncrementTick+0x150>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d120      	bne.n	8004116 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040d4:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <xTaskIncrementTick+0x154>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	603b      	str	r3, [r7, #0]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xTaskIncrementTick+0x46>
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <xTaskIncrementTick+0x154>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	4b42      	ldr	r3, [pc, #264]	; (8004204 <xTaskIncrementTick+0x158>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a40      	ldr	r2, [pc, #256]	; (8004200 <xTaskIncrementTick+0x154>)
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4a40      	ldr	r2, [pc, #256]	; (8004204 <xTaskIncrementTick+0x158>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <xTaskIncrementTick+0x15c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a3e      	ldr	r2, [pc, #248]	; (8004208 <xTaskIncrementTick+0x15c>)
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	f000 fac3 	bl	800469c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004116:	4b3d      	ldr	r3, [pc, #244]	; (800420c <xTaskIncrementTick+0x160>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	429a      	cmp	r2, r3
 800411e:	d34c      	bcc.n	80041ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004120:	4b37      	ldr	r3, [pc, #220]	; (8004200 <xTaskIncrementTick+0x154>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412a:	4b38      	ldr	r3, [pc, #224]	; (800420c <xTaskIncrementTick+0x160>)
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	601a      	str	r2, [r3, #0]
					break;
 8004132:	e042      	b.n	80041ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004134:	4b32      	ldr	r3, [pc, #200]	; (8004200 <xTaskIncrementTick+0x154>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d203      	bcs.n	8004154 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800414c:	4a2f      	ldr	r2, [pc, #188]	; (800420c <xTaskIncrementTick+0x160>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004152:	e032      	b.n	80041ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3304      	adds	r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe ffc7 	bl	80030ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3318      	adds	r3, #24
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe ffbe 	bl	80030ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f002 fdf4 	bl	8006d60 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <xTaskIncrementTick+0x164>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	4a22      	ldr	r2, [pc, #136]	; (8004210 <xTaskIncrementTick+0x164>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <xTaskIncrementTick+0x168>)
 8004198:	441a      	add	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7fe ff46 	bl	8003032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <xTaskIncrementTick+0x16c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3b5      	bcc.n	8004120 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b8:	e7b2      	b.n	8004120 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <xTaskIncrementTick+0x16c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	4914      	ldr	r1, [pc, #80]	; (8004214 <xTaskIncrementTick+0x168>)
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d907      	bls.n	80041e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e004      	b.n	80041e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <xTaskIncrementTick+0x170>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	4a0f      	ldr	r2, [pc, #60]	; (800421c <xTaskIncrementTick+0x170>)
 80041e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <xTaskIncrementTick+0x174>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80041ee:	697b      	ldr	r3, [r7, #20]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000204 	.word	0x20000204
 80041fc:	200001e0 	.word	0x200001e0
 8004200:	20000194 	.word	0x20000194
 8004204:	20000198 	.word	0x20000198
 8004208:	200001f4 	.word	0x200001f4
 800420c:	200001fc 	.word	0x200001fc
 8004210:	200001e4 	.word	0x200001e4
 8004214:	20000108 	.word	0x20000108
 8004218:	20000104 	.word	0x20000104
 800421c:	200001ec 	.word	0x200001ec
 8004220:	200001f0 	.word	0x200001f0

08004224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <vTaskSwitchContext+0xbc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004232:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <vTaskSwitchContext+0xc0>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004238:	e04d      	b.n	80042d6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 800423a:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <vTaskSwitchContext+0xc0>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <vTaskSwitchContext+0xc4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	f1c3 031f 	rsb	r3, r3, #31
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	4925      	ldr	r1, [pc, #148]	; (80042ec <vTaskSwitchContext+0xc8>)
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <vTaskSwitchContext+0x5c>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	607b      	str	r3, [r7, #4]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vTaskSwitchContext+0x5a>
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <vTaskSwitchContext+0xc8>)
 800428c:	4413      	add	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3308      	adds	r3, #8
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d104      	bne.n	80042b0 <vTaskSwitchContext+0x8c>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <vTaskSwitchContext+0xcc>)
 80042b8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <vTaskSwitchContext+0xcc>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <vTaskSwitchContext+0xd0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d102      	bne.n	80042cc <vTaskSwitchContext+0xa8>
 80042c6:	f002 fcab 	bl	8006c20 <SEGGER_SYSVIEW_OnIdle>
}
 80042ca:	e004      	b.n	80042d6 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <vTaskSwitchContext+0xcc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f002 fd03 	bl	8006cdc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80042d6:	bf00      	nop
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000204 	.word	0x20000204
 80042e4:	200001f0 	.word	0x200001f0
 80042e8:	200001e4 	.word	0x200001e4
 80042ec:	20000108 	.word	0x20000108
 80042f0:	20000104 	.word	0x20000104
 80042f4:	20000200 	.word	0x20000200

080042f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60fb      	str	r3, [r7, #12]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <vTaskPlaceOnEventList+0x44>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3318      	adds	r3, #24
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe fea7 	bl	800307a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800432c:	2101      	movs	r1, #1
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f000 fa7c 	bl	800482c <prvAddCurrentTaskToDelayedList>
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000104 	.word	0x20000104

08004340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	617b      	str	r3, [r7, #20]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <vTaskPlaceOnEventListRestricted+0x58>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3318      	adds	r3, #24
 800436e:	4619      	mov	r1, r3
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7fe fe5e 	bl	8003032 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004382:	2024      	movs	r0, #36	; 0x24
 8004384:	f001 ff4e 	bl	8006224 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	68b8      	ldr	r0, [r7, #8]
 800438c:	f000 fa4e 	bl	800482c <prvAddCurrentTaskToDelayedList>
	}
 8004390:	bf00      	nop
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000104 	.word	0x20000104

0800439c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60fb      	str	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3318      	adds	r3, #24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fe8d 	bl	80030ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d2:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <xTaskRemoveFromEventList+0xb4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d120      	bne.n	800441c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3304      	adds	r3, #4
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fe84 	bl	80030ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f002 fcba 	bl	8006d60 <SEGGER_SYSVIEW_OnTaskStartReady>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <xTaskRemoveFromEventList+0xb8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	4a16      	ldr	r2, [pc, #88]	; (8004454 <xTaskRemoveFromEventList+0xb8>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <xTaskRemoveFromEventList+0xbc>)
 800440c:	441a      	add	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f7fe fe0c 	bl	8003032 <vListInsertEnd>
 800441a:	e005      	b.n	8004428 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	3318      	adds	r3, #24
 8004420:	4619      	mov	r1, r3
 8004422:	480e      	ldr	r0, [pc, #56]	; (800445c <xTaskRemoveFromEventList+0xc0>)
 8004424:	f7fe fe05 	bl	8003032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <xTaskRemoveFromEventList+0xc4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	429a      	cmp	r2, r3
 8004434:	d905      	bls.n	8004442 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <xTaskRemoveFromEventList+0xc8>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e001      	b.n	8004446 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004446:	697b      	ldr	r3, [r7, #20]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000204 	.word	0x20000204
 8004454:	200001e4 	.word	0x200001e4
 8004458:	20000108 	.word	0x20000108
 800445c:	2000019c 	.word	0x2000019c
 8004460:	20000104 	.word	0x20000104
 8004464:	200001f0 	.word	0x200001f0

08004468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <vTaskInternalSetTimeOutState+0x24>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <vTaskInternalSetTimeOutState+0x28>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	200001f4 	.word	0x200001f4
 8004490:	200001e0 	.word	0x200001e0

08004494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	613b      	str	r3, [r7, #16]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60fb      	str	r3, [r7, #12]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044d6:	f000 fe1d 	bl	8005114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <xTaskCheckForTimeOut+0xbc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d102      	bne.n	80044fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e023      	b.n	8004542 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <xTaskCheckForTimeOut+0xc0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d007      	beq.n	8004516 <xTaskCheckForTimeOut+0x82>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004510:	2301      	movs	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	e015      	b.n	8004542 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	429a      	cmp	r2, r3
 800451e:	d20b      	bcs.n	8004538 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad2      	subs	r2, r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff9b 	bl	8004468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e004      	b.n	8004542 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004542:	f000 fe17 	bl	8005174 <vPortExitCritical>

	return xReturn;
 8004546:	69fb      	ldr	r3, [r7, #28]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	200001e0 	.word	0x200001e0
 8004554:	200001f4 	.word	0x200001f4

08004558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <vTaskMissedYield+0x14>)
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	200001f0 	.word	0x200001f0

08004570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004578:	f000 f852 	bl	8004620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvIdleTask+0x28>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d9f9      	bls.n	8004578 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <prvIdleTask+0x2c>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004594:	e7f0      	b.n	8004578 <prvIdleTask+0x8>
 8004596:	bf00      	nop
 8004598:	20000108 	.word	0x20000108
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	e00c      	b.n	80045c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <prvInitialiseTaskLists+0x60>)
 80045b8:	4413      	add	r3, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fd0c 	bl	8002fd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3301      	adds	r3, #1
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d9ef      	bls.n	80045ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045cc:	480d      	ldr	r0, [pc, #52]	; (8004604 <prvInitialiseTaskLists+0x64>)
 80045ce:	f7fe fd03 	bl	8002fd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <prvInitialiseTaskLists+0x68>)
 80045d4:	f7fe fd00 	bl	8002fd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <prvInitialiseTaskLists+0x6c>)
 80045da:	f7fe fcfd 	bl	8002fd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045de:	480c      	ldr	r0, [pc, #48]	; (8004610 <prvInitialiseTaskLists+0x70>)
 80045e0:	f7fe fcfa 	bl	8002fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045e4:	480b      	ldr	r0, [pc, #44]	; (8004614 <prvInitialiseTaskLists+0x74>)
 80045e6:	f7fe fcf7 	bl	8002fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <prvInitialiseTaskLists+0x78>)
 80045ec:	4a05      	ldr	r2, [pc, #20]	; (8004604 <prvInitialiseTaskLists+0x64>)
 80045ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <prvInitialiseTaskLists+0x7c>)
 80045f2:	4a05      	ldr	r2, [pc, #20]	; (8004608 <prvInitialiseTaskLists+0x68>)
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000108 	.word	0x20000108
 8004604:	2000016c 	.word	0x2000016c
 8004608:	20000180 	.word	0x20000180
 800460c:	2000019c 	.word	0x2000019c
 8004610:	200001b0 	.word	0x200001b0
 8004614:	200001c8 	.word	0x200001c8
 8004618:	20000194 	.word	0x20000194
 800461c:	20000198 	.word	0x20000198

08004620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004626:	e019      	b.n	800465c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004628:	f000 fd74 	bl	8005114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462c:	4b10      	ldr	r3, [pc, #64]	; (8004670 <prvCheckTasksWaitingTermination+0x50>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fd57 	bl	80030ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <prvCheckTasksWaitingTermination+0x54>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <prvCheckTasksWaitingTermination+0x54>)
 8004646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvCheckTasksWaitingTermination+0x58>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <prvCheckTasksWaitingTermination+0x58>)
 8004650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004652:	f000 fd8f 	bl	8005174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f810 	bl	800467c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <prvCheckTasksWaitingTermination+0x58>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e1      	bne.n	8004628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200001b0 	.word	0x200001b0
 8004674:	200001dc 	.word	0x200001dc
 8004678:	200001c4 	.word	0x200001c4

0800467c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4618      	mov	r0, r3
 800468a:	f000 ff31 	bl	80054f0 <vPortFree>
			vPortFree( pxTCB );
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ff2e 	bl	80054f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <prvResetNextTaskUnblockTime+0x38>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <prvResetNextTaskUnblockTime+0x3c>)
 80046ae:	f04f 32ff 	mov.w	r2, #4294967295
 80046b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046b4:	e008      	b.n	80046c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <prvResetNextTaskUnblockTime+0x38>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <prvResetNextTaskUnblockTime+0x3c>)
 80046c6:	6013      	str	r3, [r2, #0]
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000194 	.word	0x20000194
 80046d8:	200001fc 	.word	0x200001fc

080046dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <xTaskGetSchedulerState+0x34>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046ea:	2301      	movs	r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	e008      	b.n	8004702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <xTaskGetSchedulerState+0x38>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046f8:	2302      	movs	r3, #2
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e001      	b.n	8004702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004702:	687b      	ldr	r3, [r7, #4]
	}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	200001e8 	.word	0x200001e8
 8004714:	20000204 	.word	0x20000204

08004718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d073      	beq.n	8004816 <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800472e:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <xTaskPriorityDisinherit+0x108>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	429a      	cmp	r2, r3
 8004736:	d00a      	beq.n	800474e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	60fb      	str	r3, [r7, #12]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60bb      	str	r3, [r7, #8]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	1e5a      	subs	r2, r3, #1
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477e:	429a      	cmp	r2, r3
 8004780:	d049      	beq.n	8004816 <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d145      	bne.n	8004816 <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	3304      	adds	r3, #4
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fcac 	bl	80030ec <uxListRemove>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d115      	bne.n	80047c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	4921      	ldr	r1, [pc, #132]	; (8004824 <xTaskPriorityDisinherit+0x10c>)
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xTaskPriorityDisinherit+0xae>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	2201      	movs	r2, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43da      	mvns	r2, r3
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <xTaskPriorityDisinherit+0x110>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4013      	ands	r3, r2
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <xTaskPriorityDisinherit+0x110>)
 80047c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	204a      	movs	r0, #74	; 0x4a
 80047cc:	f001 fd48 	bl	8006260 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f1c3 0205 	rsb	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <xTaskPriorityDisinherit+0x110>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4a0d      	ldr	r2, [pc, #52]	; (8004828 <xTaskPriorityDisinherit+0x110>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <xTaskPriorityDisinherit+0x10c>)
 8004804:	441a      	add	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f7fe fc10 	bl	8003032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004816:	697b      	ldr	r3, [r7, #20]
	}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000104 	.word	0x20000104
 8004824:	20000108 	.word	0x20000108
 8004828:	200001e4 	.word	0x200001e4

0800482c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004836:	4b32      	ldr	r3, [pc, #200]	; (8004900 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800483c:	4b31      	ldr	r3, [pc, #196]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3304      	adds	r3, #4
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fc52 	bl	80030ec <uxListRemove>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800484e:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	2201      	movs	r2, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <prvAddCurrentTaskToDelayedList+0xdc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4013      	ands	r3, r2
 8004862:	4a29      	ldr	r2, [pc, #164]	; (8004908 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004864:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d110      	bne.n	8004890 <prvAddCurrentTaskToDelayedList+0x64>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	211b      	movs	r1, #27
 800487a:	4618      	mov	r0, r3
 800487c:	f002 fab2 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004880:	4b20      	ldr	r3, [pc, #128]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4820      	ldr	r0, [pc, #128]	; (800490c <prvAddCurrentTaskToDelayedList+0xe0>)
 800488a:	f7fe fbd2 	bl	8003032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800488e:	e032      	b.n	80048f6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d20f      	bcs.n	80048c8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80048a8:	4b16      	ldr	r3, [pc, #88]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2104      	movs	r1, #4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f002 fa98 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <prvAddCurrentTaskToDelayedList+0xe4>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f7fe fbda 	bl	800307a <vListInsert>
}
 80048c6:	e016      	b.n	80048f6 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2104      	movs	r1, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f002 fa88 	bl	8006de4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe fbca 	bl	800307a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvAddCurrentTaskToDelayedList+0xec>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d202      	bcs.n	80048f6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80048f0:	4a09      	ldr	r2, [pc, #36]	; (8004918 <prvAddCurrentTaskToDelayedList+0xec>)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6013      	str	r3, [r2, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200001e0 	.word	0x200001e0
 8004904:	20000104 	.word	0x20000104
 8004908:	200001e4 	.word	0x200001e4
 800490c:	200001c8 	.word	0x200001c8
 8004910:	20000198 	.word	0x20000198
 8004914:	20000194 	.word	0x20000194
 8004918:	200001fc 	.word	0x200001fc

0800491c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004926:	f000 fa95 	bl	8004e54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <xTimerCreateTimerTask+0x54>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <xTimerCreateTimerTask+0x58>)
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	2302      	movs	r3, #2
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004940:	490d      	ldr	r1, [pc, #52]	; (8004978 <xTimerCreateTimerTask+0x5c>)
 8004942:	480e      	ldr	r0, [pc, #56]	; (800497c <xTimerCreateTimerTask+0x60>)
 8004944:	f7ff f922 	bl	8003b8c <xTaskCreate>
 8004948:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	603b      	str	r3, [r7, #0]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004966:	687b      	ldr	r3, [r7, #4]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000238 	.word	0x20000238
 8004974:	2000023c 	.word	0x2000023c
 8004978:	08007238 	.word	0x08007238
 800497c:	08004a9d 	.word	0x08004a9d

08004980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08a      	sub	sp, #40	; 0x28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	623b      	str	r3, [r7, #32]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049ae:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <xTimerGenericCommand+0x98>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02a      	beq.n	8004a0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	dc18      	bgt.n	80049fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049c8:	f7ff fe88 	bl	80046dc <xTaskGetSchedulerState>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d109      	bne.n	80049e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <xTimerGenericCommand+0x98>)
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	f107 0114 	add.w	r1, r7, #20
 80049da:	2300      	movs	r3, #0
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	f7fe fc7d 	bl	80032dc <xQueueGenericSend>
 80049e2:	6278      	str	r0, [r7, #36]	; 0x24
 80049e4:	e012      	b.n	8004a0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <xTimerGenericCommand+0x98>)
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	f107 0114 	add.w	r1, r7, #20
 80049ee:	2300      	movs	r3, #0
 80049f0:	2200      	movs	r2, #0
 80049f2:	f7fe fc73 	bl	80032dc <xQueueGenericSend>
 80049f6:	6278      	str	r0, [r7, #36]	; 0x24
 80049f8:	e008      	b.n	8004a0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049fa:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <xTimerGenericCommand+0x98>)
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f107 0114 	add.w	r1, r7, #20
 8004a02:	2300      	movs	r3, #0
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	f7fe fd8f 	bl	8003528 <xQueueGenericSendFromISR>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000238 	.word	0x20000238

08004a1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a26:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <prvProcessExpiredTimer+0x7c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fb59 	bl	80030ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d122      	bne.n	8004a88 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	18d1      	adds	r1, r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f000 f8c8 	bl	8004be4 <prvInsertTimerInActiveList>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	2100      	movs	r1, #0
 8004a64:	6978      	ldr	r0, [r7, #20]
 8004a66:	f7ff ff8b 	bl	8004980 <xTimerGenericCommand>
 8004a6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60fb      	str	r3, [r7, #12]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	4798      	blx	r3
}
 8004a90:	bf00      	nop
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000230 	.word	0x20000230

08004a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aa4:	f107 0308 	add.w	r3, r7, #8
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f857 	bl	8004b5c <prvGetNextExpireTime>
 8004aae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f803 	bl	8004ac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aba:	f000 f8d5 	bl	8004c68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004abe:	e7f1      	b.n	8004aa4 <prvTimerTask+0x8>

08004ac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004aca:	f7ff fa1f 	bl	8003f0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f866 	bl	8004ba4 <prvSampleTimeNow>
 8004ad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d130      	bne.n	8004b42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <prvProcessTimerOrBlockTask+0x3c>
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d806      	bhi.n	8004afc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004aee:	f7ff fa1b 	bl	8003f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff91 	bl	8004a1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004afa:	e024      	b.n	8004b46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <prvProcessTimerOrBlockTask+0x90>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <prvProcessTimerOrBlockTask+0x50>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <prvProcessTimerOrBlockTask+0x52>
 8004b10:	2300      	movs	r3, #0
 8004b12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <prvProcessTimerOrBlockTask+0x94>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	f7fe ffff 	bl	8003b24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b26:	f7ff f9ff 	bl	8003f28 <xTaskResumeAll>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <prvProcessTimerOrBlockTask+0x98>)
 8004b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
}
 8004b40:	e001      	b.n	8004b46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b42:	f7ff f9f1 	bl	8003f28 <xTaskResumeAll>
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000234 	.word	0x20000234
 8004b54:	20000238 	.word	0x20000238
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <prvGetNextExpireTime+0x44>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <prvGetNextExpireTime+0x16>
 8004b6e:	2201      	movs	r2, #1
 8004b70:	e000      	b.n	8004b74 <prvGetNextExpireTime+0x18>
 8004b72:	2200      	movs	r2, #0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <prvGetNextExpireTime+0x44>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e001      	b.n	8004b90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000230 	.word	0x20000230

08004ba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bac:	f7ff fa5c 	bl	8004068 <xTaskGetTickCount>
 8004bb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <prvSampleTimeNow+0x3c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d205      	bcs.n	8004bc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bbc:	f000 f8e8 	bl	8004d90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bce:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <prvSampleTimeNow+0x3c>)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000240 	.word	0x20000240

08004be4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d812      	bhi.n	8004c30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	1ad2      	subs	r2, r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e01b      	b.n	8004c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <prvInsertTimerInActiveList+0x7c>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f7fe fa26 	bl	800307a <vListInsert>
 8004c2e:	e012      	b.n	8004c56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d206      	bcs.n	8004c46 <prvInsertTimerInActiveList+0x62>
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d302      	bcc.n	8004c46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e007      	b.n	8004c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <prvInsertTimerInActiveList+0x80>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fe fa12 	bl	800307a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c56:	697b      	ldr	r3, [r7, #20]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000234 	.word	0x20000234
 8004c64:	20000230 	.word	0x20000230

08004c68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08c      	sub	sp, #48	; 0x30
 8004c6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c6e:	e07c      	b.n	8004d6a <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	db78      	blt.n	8004d68 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	3304      	adds	r3, #4
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fa30 	bl	80030ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff ff88 	bl	8004ba4 <prvSampleTimeNow>
 8004c94:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d866      	bhi.n	8004d6a <prvProcessReceivedCommands+0x102>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <prvProcessReceivedCommands+0x3c>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004ccd 	.word	0x08004ccd
 8004cb0:	08004d6b 	.word	0x08004d6b
 8004cb4:	08004d29 	.word	0x08004d29
 8004cb8:	08004d61 	.word	0x08004d61
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004ccd 	.word	0x08004ccd
 8004cc4:	08004d6b 	.word	0x08004d6b
 8004cc8:	08004d29 	.word	0x08004d29
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	18d1      	adds	r1, r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a3a      	ldr	r2, [r7, #32]
 8004cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cda:	f7ff ff83 	bl	8004be4 <prvInsertTimerInActiveList>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d042      	beq.n	8004d6a <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d13a      	bne.n	8004d6a <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	441a      	add	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	2100      	movs	r1, #0
 8004d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d06:	f7ff fe3b 	bl	8004980 <xTimerGenericCommand>
 8004d0a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d12b      	bne.n	8004d6a <prvProcessReceivedCommands+0x102>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61bb      	str	r3, [r7, #24]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	617b      	str	r3, [r7, #20]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	18d1      	adds	r1, r2, r3
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	6a3a      	ldr	r2, [r7, #32]
 8004d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5a:	f7ff ff43 	bl	8004be4 <prvInsertTimerInActiveList>
					break;
 8004d5e:	e004      	b.n	8004d6a <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8004d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d62:	f000 fbc5 	bl	80054f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d66:	e000      	b.n	8004d6a <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d6a:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <prvProcessReceivedCommands+0x124>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f107 0108 	add.w	r1, r7, #8
 8004d72:	2200      	movs	r2, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fc83 	bl	8003680 <xQueueReceive>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f af77 	bne.w	8004c70 <prvProcessReceivedCommands+0x8>
	}
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	3728      	adds	r7, #40	; 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000238 	.word	0x20000238

08004d90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d96:	e045      	b.n	8004e24 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fe f99b 	bl	80030ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d12e      	bne.n	8004e24 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d90e      	bls.n	8004df6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7fe f943 	bl	800307a <vListInsert>
 8004df4:	e016      	b.n	8004e24 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004df6:	2300      	movs	r3, #0
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff fdbd 	bl	8004980 <xTimerGenericCommand>
 8004e06:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	603b      	str	r3, [r7, #0]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1b4      	bne.n	8004d98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <prvSwitchTimerLists+0xc0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004e3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <prvSwitchTimerLists+0xc0>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6013      	str	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000230 	.word	0x20000230
 8004e50:	20000234 	.word	0x20000234

08004e54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e58:	f000 f95c 	bl	8005114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e5c:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <prvCheckForValidListAndQueue+0x54>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11d      	bne.n	8004ea0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e64:	4811      	ldr	r0, [pc, #68]	; (8004eac <prvCheckForValidListAndQueue+0x58>)
 8004e66:	f7fe f8b7 	bl	8002fd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e6a:	4811      	ldr	r0, [pc, #68]	; (8004eb0 <prvCheckForValidListAndQueue+0x5c>)
 8004e6c:	f7fe f8b4 	bl	8002fd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e70:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e72:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <prvCheckForValidListAndQueue+0x58>)
 8004e74:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <prvCheckForValidListAndQueue+0x64>)
 8004e78:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <prvCheckForValidListAndQueue+0x5c>)
 8004e7a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	210c      	movs	r1, #12
 8004e80:	200a      	movs	r0, #10
 8004e82:	f7fe f9c5 	bl	8003210 <xQueueGenericCreate>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <prvCheckForValidListAndQueue+0x54>)
 8004e8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <prvCheckForValidListAndQueue+0x54>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <prvCheckForValidListAndQueue+0x54>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4908      	ldr	r1, [pc, #32]	; (8004ebc <prvCheckForValidListAndQueue+0x68>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fe10 	bl	8003ac0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea0:	f000 f968 	bl	8005174 <vPortExitCritical>
}
 8004ea4:	bf00      	nop
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000238 	.word	0x20000238
 8004eac:	20000208 	.word	0x20000208
 8004eb0:	2000021c 	.word	0x2000021c
 8004eb4:	20000230 	.word	0x20000230
 8004eb8:	20000234 	.word	0x20000234
 8004ebc:	08007240 	.word	0x08007240

08004ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <pxPortInitialiseStack+0x64>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b14      	subs	r3, #20
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f06f 0202 	mvn.w	r2, #2
 8004f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b20      	subs	r3, #32
 8004f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	08004f29 	.word	0x08004f29

08004f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <prvTaskExitError+0x54>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d00a      	beq.n	8004f52 <prvTaskExitError+0x2a>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <prvTaskExitError+0x28>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	60bb      	str	r3, [r7, #8]
}
 8004f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f66:	bf00      	nop
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0fc      	beq.n	8004f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	2000000c 	.word	0x2000000c

08004f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <pxCurrentTCBConst2>)
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	6808      	ldr	r0, [r1, #0]
 8004f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	f380 8809 	msr	PSP, r0
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8811 	msr	BASEPRI, r0
 8004f9a:	4770      	bx	lr
 8004f9c:	f3af 8000 	nop.w

08004fa0 <pxCurrentTCBConst2>:
 8004fa0:	20000104 	.word	0x20000104
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fa8:	4808      	ldr	r0, [pc, #32]	; (8004fcc <prvPortStartFirstTask+0x24>)
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f380 8808 	msr	MSP, r0
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8814 	msr	CONTROL, r0
 8004fba:	b662      	cpsie	i
 8004fbc:	b661      	cpsie	f
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	df00      	svc	0
 8004fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fca:	bf00      	nop
 8004fcc:	e000ed08 	.word	0xe000ed08

08004fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fd6:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <xPortStartScheduler+0x120>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a46      	ldr	r2, [pc, #280]	; (80050f4 <xPortStartScheduler+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10a      	bne.n	8004ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	613b      	str	r3, [r7, #16]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ff6:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <xPortStartScheduler+0x120>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a3f      	ldr	r2, [pc, #252]	; (80050f8 <xPortStartScheduler+0x128>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10a      	bne.n	8005016 <xPortStartScheduler+0x46>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <xPortStartScheduler+0x12c>)
 8005018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <xPortStartScheduler+0x130>)
 800503c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <xPortStartScheduler+0x134>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005044:	e009      	b.n	800505a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005046:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <xPortStartScheduler+0x134>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3b01      	subs	r3, #1
 800504c:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <xPortStartScheduler+0x134>)
 800504e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d0ef      	beq.n	8005046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005066:	4b27      	ldr	r3, [pc, #156]	; (8005104 <xPortStartScheduler+0x134>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	d00a      	beq.n	8005088 <xPortStartScheduler+0xb8>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60bb      	str	r3, [r7, #8]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <xPortStartScheduler+0x134>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <xPortStartScheduler+0x134>)
 8005090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <xPortStartScheduler+0x134>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <xPortStartScheduler+0x134>)
 800509c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <xPortStartScheduler+0x138>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <xPortStartScheduler+0x138>)
 80050ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <xPortStartScheduler+0x138>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a14      	ldr	r2, [pc, #80]	; (8005108 <xPortStartScheduler+0x138>)
 80050b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050be:	f000 f8e5 	bl	800528c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <xPortStartScheduler+0x13c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050c8:	f000 f904 	bl	80052d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <xPortStartScheduler+0x140>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0f      	ldr	r2, [pc, #60]	; (8005110 <xPortStartScheduler+0x140>)
 80050d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050d8:	f7ff ff66 	bl	8004fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050dc:	f7ff f8a2 	bl	8004224 <vTaskSwitchContext>
	prvTaskExitError();
 80050e0:	f7ff ff22 	bl	8004f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	410fc271 	.word	0x410fc271
 80050f8:	410fc270 	.word	0x410fc270
 80050fc:	e000e400 	.word	0xe000e400
 8005100:	20000244 	.word	0x20000244
 8005104:	20000248 	.word	0x20000248
 8005108:	e000ed20 	.word	0xe000ed20
 800510c:	2000000c 	.word	0x2000000c
 8005110:	e000ef34 	.word	0xe000ef34

08005114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	607b      	str	r3, [r7, #4]
}
 800512c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <vPortEnterCritical+0x58>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <vPortEnterCritical+0x58>)
 8005136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <vPortEnterCritical+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10f      	bne.n	8005160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortEnterCritical+0x5c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <vPortEnterCritical+0x4c>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <vPortEnterCritical+0x4a>
	}
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	2000000c 	.word	0x2000000c
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <vPortExitCritical+0x50>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <vPortExitCritical+0x24>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vPortExitCritical+0x50>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3b01      	subs	r3, #1
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <vPortExitCritical+0x50>)
 80051a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <vPortExitCritical+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <vPortExitCritical+0x42>
 80051aa:	2300      	movs	r3, #0
 80051ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f383 8811 	msr	BASEPRI, r3
}
 80051b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2000000c 	.word	0x2000000c
	...

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <pxCurrentTCBConst>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f01e 0f10 	tst.w	lr, #16
 80051e0:	bf08      	it	eq
 80051e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051f4:	f380 8811 	msr	BASEPRI, r0
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f7ff f810 	bl	8004224 <vTaskSwitchContext>
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f380 8811 	msr	BASEPRI, r0
 800520c:	bc09      	pop	{r0, r3}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005216:	f01e 0f10 	tst.w	lr, #16
 800521a:	bf08      	it	eq
 800521c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005220:	f380 8809 	msr	PSP, r0
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst>:
 8005230:	20000104 	.word	0x20000104
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
}
 8005250:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8005252:	f001 fc6b 	bl	8006b2c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005256:	f7fe ff29 	bl	80040ac <xTaskIncrementTick>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8005260:	f001 fcc2 	bl	8006be8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005264:	4b08      	ldr	r3, [pc, #32]	; (8005288 <SysTick_Handler+0x50>)
 8005266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e001      	b.n	8005272 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800526e:	f001 fc9f 	bl	8006bb0 <SEGGER_SYSVIEW_RecordExitISR>
 8005272:	2300      	movs	r3, #0
 8005274:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f383 8811 	msr	BASEPRI, r3
}
 800527c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <vPortSetupTimerInterrupt+0x38>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <vPortSetupTimerInterrupt+0x3c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <vPortSetupTimerInterrupt+0x40>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <vPortSetupTimerInterrupt+0x44>)
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e010 	.word	0xe000e010
 80052c4:	e000e018 	.word	0xe000e018
 80052c8:	20000000 	.word	0x20000000
 80052cc:	10624dd3 	.word	0x10624dd3
 80052d0:	e000e014 	.word	0xe000e014

080052d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052e4 <vPortEnableVFP+0x10>
 80052d8:	6801      	ldr	r1, [r0, #0]
 80052da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052de:	6001      	str	r1, [r0, #0]
 80052e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052e2:	bf00      	nop
 80052e4:	e000ed88 	.word	0xe000ed88

080052e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ee:	f3ef 8305 	mrs	r3, IPSR
 80052f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d914      	bls.n	8005324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <vPortValidateInterruptPriority+0x70>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005304:	4b15      	ldr	r3, [pc, #84]	; (800535c <vPortValidateInterruptPriority+0x74>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	7afa      	ldrb	r2, [r7, #11]
 800530a:	429a      	cmp	r2, r3
 800530c:	d20a      	bcs.n	8005324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <vPortValidateInterruptPriority+0x78>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <vPortValidateInterruptPriority+0x7c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d90a      	bls.n	800534a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	603b      	str	r3, [r7, #0]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <vPortValidateInterruptPriority+0x60>
	}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000e3f0 	.word	0xe000e3f0
 800535c:	20000244 	.word	0x20000244
 8005360:	e000ed0c 	.word	0xe000ed0c
 8005364:	20000248 	.word	0x20000248

08005368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005374:	f7fe fdca 	bl	8003f0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005378:	4b58      	ldr	r3, [pc, #352]	; (80054dc <pvPortMalloc+0x174>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005380:	f000 f910 	bl	80055a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005384:	4b56      	ldr	r3, [pc, #344]	; (80054e0 <pvPortMalloc+0x178>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 808e 	bne.w	80054ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01d      	beq.n	80053d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005398:	2208      	movs	r2, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d014      	beq.n	80053d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f023 0307 	bic.w	r3, r3, #7
 80053b0:	3308      	adds	r3, #8
 80053b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <pvPortMalloc+0x6c>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	617b      	str	r3, [r7, #20]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d069      	beq.n	80054ae <pvPortMalloc+0x146>
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <pvPortMalloc+0x17c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d864      	bhi.n	80054ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053e4:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <pvPortMalloc+0x180>)
 80053e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053e8:	4b3f      	ldr	r3, [pc, #252]	; (80054e8 <pvPortMalloc+0x180>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ee:	e004      	b.n	80053fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <pvPortMalloc+0xa4>
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f1      	bne.n	80053f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800540c:	4b33      	ldr	r3, [pc, #204]	; (80054dc <pvPortMalloc+0x174>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	429a      	cmp	r2, r3
 8005414:	d04b      	beq.n	80054ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2208      	movs	r2, #8
 800541c:	4413      	add	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	2308      	movs	r3, #8
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	429a      	cmp	r2, r3
 8005436:	d91f      	bls.n	8005478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <pvPortMalloc+0xf8>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	613b      	str	r3, [r7, #16]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005472:	69b8      	ldr	r0, [r7, #24]
 8005474:	f000 f8f8 	bl	8005668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005478:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <pvPortMalloc+0x17c>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <pvPortMalloc+0x17c>)
 8005484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005486:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <pvPortMalloc+0x17c>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b18      	ldr	r3, [pc, #96]	; (80054ec <pvPortMalloc+0x184>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d203      	bcs.n	800549a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <pvPortMalloc+0x17c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a15      	ldr	r2, [pc, #84]	; (80054ec <pvPortMalloc+0x184>)
 8005498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <pvPortMalloc+0x178>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054ae:	f7fe fd3b 	bl	8003f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <pvPortMalloc+0x16a>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60fb      	str	r3, [r7, #12]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <pvPortMalloc+0x168>
	return pvReturn;
 80054d2:	69fb      	ldr	r3, [r7, #28]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3728      	adds	r7, #40	; 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20012e54 	.word	0x20012e54
 80054e0:	20012e60 	.word	0x20012e60
 80054e4:	20012e58 	.word	0x20012e58
 80054e8:	20012e4c 	.word	0x20012e4c
 80054ec:	20012e5c 	.word	0x20012e5c

080054f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d048      	beq.n	8005594 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005502:	2308      	movs	r3, #8
 8005504:	425b      	negs	r3, r3
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4b21      	ldr	r3, [pc, #132]	; (800559c <vPortFree+0xac>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <vPortFree+0x44>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	60fb      	str	r3, [r7, #12]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <vPortFree+0x62>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	60bb      	str	r3, [r7, #8]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <vPortFree+0xac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d019      	beq.n	8005594 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d115      	bne.n	8005594 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <vPortFree+0xac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005578:	f7fe fcc8 	bl	8003f0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <vPortFree+0xb0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4413      	add	r3, r2
 8005586:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <vPortFree+0xb0>)
 8005588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800558a:	6938      	ldr	r0, [r7, #16]
 800558c:	f000 f86c 	bl	8005668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005590:	f7fe fcca 	bl	8003f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20012e60 	.word	0x20012e60
 80055a0:	20012e58 	.word	0x20012e58

080055a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055aa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80055ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055b0:	4b27      	ldr	r3, [pc, #156]	; (8005650 <prvHeapInit+0xac>)
 80055b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3307      	adds	r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0307 	bic.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <prvHeapInit+0xac>)
 80055d4:	4413      	add	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <prvHeapInit+0xb0>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <prvHeapInit+0xb0>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	4413      	add	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055f0:	2208      	movs	r2, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0307 	bic.w	r3, r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a15      	ldr	r2, [pc, #84]	; (8005658 <prvHeapInit+0xb4>)
 8005604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <prvHeapInit+0xb4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <prvHeapInit+0xb4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	1ad2      	subs	r2, r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <prvHeapInit+0xb4>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <prvHeapInit+0xb8>)
 8005632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a09      	ldr	r2, [pc, #36]	; (8005660 <prvHeapInit+0xbc>)
 800563a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <prvHeapInit+0xc0>)
 800563e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005642:	601a      	str	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	2000024c 	.word	0x2000024c
 8005654:	20012e4c 	.word	0x20012e4c
 8005658:	20012e54 	.word	0x20012e54
 800565c:	20012e5c 	.word	0x20012e5c
 8005660:	20012e58 	.word	0x20012e58
 8005664:	20012e60 	.word	0x20012e60

08005668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <prvInsertBlockIntoFreeList+0xac>)
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e002      	b.n	800567c <prvInsertBlockIntoFreeList+0x14>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d8f7      	bhi.n	8005676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	d108      	bne.n	80056aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	441a      	add	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d118      	bne.n	80056f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <prvInsertBlockIntoFreeList+0xb0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d00d      	beq.n	80056e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	441a      	add	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e008      	b.n	80056f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <prvInsertBlockIntoFreeList+0xb0>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e003      	b.n	80056f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d002      	beq.n	8005706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20012e4c 	.word	0x20012e4c
 8005718:	20012e54 	.word	0x20012e54

0800571c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005720:	4803      	ldr	r0, [pc, #12]	; (8005730 <_cbSendSystemDesc+0x14>)
 8005722:	f001 f9ad 	bl	8006a80 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005726:	4803      	ldr	r0, [pc, #12]	; (8005734 <_cbSendSystemDesc+0x18>)
 8005728:	f001 f9aa 	bl	8006a80 <SEGGER_SYSVIEW_SendSysDesc>
}
 800572c:	bf00      	nop
 800572e:	bd80      	pop	{r7, pc}
 8005730:	08007248 	.word	0x08007248
 8005734:	0800727c 	.word	0x0800727c

08005738 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <SEGGER_SYSVIEW_Conf+0x20>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <SEGGER_SYSVIEW_Conf+0x20>)
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <SEGGER_SYSVIEW_Conf+0x24>)
 8005746:	4a06      	ldr	r2, [pc, #24]	; (8005760 <SEGGER_SYSVIEW_Conf+0x28>)
 8005748:	f000 fd18 	bl	800617c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800574c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005750:	f000 fd58 	bl	8006204 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000000 	.word	0x20000000
 800575c:	0800571d 	.word	0x0800571d
 8005760:	0800731c 	.word	0x0800731c

08005764 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005766:	b085      	sub	sp, #20
 8005768:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	e033      	b.n	80057d8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005770:	491e      	ldr	r1, [pc, #120]	; (80057ec <_cbSendTaskList+0x88>)
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	491a      	ldr	r1, [pc, #104]	; (80057ec <_cbSendTaskList+0x88>)
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	3304      	adds	r3, #4
 8005790:	6819      	ldr	r1, [r3, #0]
 8005792:	4c16      	ldr	r4, [pc, #88]	; (80057ec <_cbSendTaskList+0x88>)
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4423      	add	r3, r4
 80057a0:	3308      	adds	r3, #8
 80057a2:	681c      	ldr	r4, [r3, #0]
 80057a4:	4d11      	ldr	r5, [pc, #68]	; (80057ec <_cbSendTaskList+0x88>)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	442b      	add	r3, r5
 80057b2:	330c      	adds	r3, #12
 80057b4:	681d      	ldr	r5, [r3, #0]
 80057b6:	4e0d      	ldr	r6, [pc, #52]	; (80057ec <_cbSendTaskList+0x88>)
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4433      	add	r3, r6
 80057c4:	3310      	adds	r3, #16
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462b      	mov	r3, r5
 80057cc:	4622      	mov	r2, r4
 80057ce:	f000 f8bd 	bl	800594c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3301      	adds	r3, #1
 80057d6:	607b      	str	r3, [r7, #4]
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <_cbSendTaskList+0x8c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3c6      	bcc.n	8005770 <_cbSendTaskList+0xc>
  }
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ec:	20012e64 	.word	0x20012e64
 80057f0:	20012f04 	.word	0x20012f04

080057f4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80057f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80057fc:	f7fe fc44 	bl	8004088 <xTaskGetTickCountFromISR>
 8005800:	4603      	mov	r3, r0
 8005802:	2200      	movs	r2, #0
 8005804:	469a      	mov	sl, r3
 8005806:	4693      	mov	fp, r2
 8005808:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800580c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	f04f 0a00 	mov.w	sl, #0
 8005818:	f04f 0b00 	mov.w	fp, #0
 800581c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005820:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005824:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005828:	4652      	mov	r2, sl
 800582a:	465b      	mov	r3, fp
 800582c:	1a14      	subs	r4, r2, r0
 800582e:	eb63 0501 	sbc.w	r5, r3, r1
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	00ab      	lsls	r3, r5, #2
 800583c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005840:	00a2      	lsls	r2, r4, #2
 8005842:	4614      	mov	r4, r2
 8005844:	461d      	mov	r5, r3
 8005846:	eb14 0800 	adds.w	r8, r4, r0
 800584a:	eb45 0901 	adc.w	r9, r5, r1
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800585a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800585e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005862:	4690      	mov	r8, r2
 8005864:	4699      	mov	r9, r3
 8005866:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800586a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800587c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800588a:	2205      	movs	r2, #5
 800588c:	492b      	ldr	r1, [pc, #172]	; (800593c <SYSVIEW_AddTask+0xc0>)
 800588e:	68b8      	ldr	r0, [r7, #8]
 8005890:	f001 fc74 	bl	800717c <memcmp>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04b      	beq.n	8005932 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b07      	cmp	r3, #7
 80058a0:	d903      	bls.n	80058aa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80058a2:	4828      	ldr	r0, [pc, #160]	; (8005944 <SYSVIEW_AddTask+0xc8>)
 80058a4:	f001 fbea 	bl	800707c <SEGGER_SYSVIEW_Warn>
    return;
 80058a8:	e044      	b.n	8005934 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80058aa:	4b25      	ldr	r3, [pc, #148]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4926      	ldr	r1, [pc, #152]	; (8005948 <SYSVIEW_AddTask+0xcc>)
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80058be:	4b20      	ldr	r3, [pc, #128]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4921      	ldr	r1, [pc, #132]	; (8005948 <SYSVIEW_AddTask+0xcc>)
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	3304      	adds	r3, #4
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	491b      	ldr	r1, [pc, #108]	; (8005948 <SYSVIEW_AddTask+0xcc>)
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3308      	adds	r3, #8
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4916      	ldr	r1, [pc, #88]	; (8005948 <SYSVIEW_AddTask+0xcc>)
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	330c      	adds	r3, #12
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005900:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4910      	ldr	r1, [pc, #64]	; (8005948 <SYSVIEW_AddTask+0xcc>)
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	3310      	adds	r3, #16
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a08      	ldr	r2, [pc, #32]	; (8005940 <SYSVIEW_AddTask+0xc4>)
 800591e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f80e 	bl	800594c <SYSVIEW_SendTaskInfo>
 8005930:	e000      	b.n	8005934 <SYSVIEW_AddTask+0xb8>
    return;
 8005932:	bf00      	nop

}
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	0800728c 	.word	0x0800728c
 8005940:	20012f04 	.word	0x20012f04
 8005944:	08007294 	.word	0x08007294
 8005948:	20012e64 	.word	0x20012e64

0800594c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	2214      	movs	r2, #20
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fc28 	bl	80071b8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	4618      	mov	r0, r3
 8005982:	f000 ff85 	bl	8006890 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005986:	bf00      	nop
 8005988:	3728      	adds	r7, #40	; 0x28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005996:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <_DoInit+0x98>)
 8005998:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2203      	movs	r2, #3
 800599e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2203      	movs	r2, #3
 80059a4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a20      	ldr	r2, [pc, #128]	; (8005a2c <_DoInit+0x9c>)
 80059aa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <_DoInit+0xa0>)
 80059b0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059b8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <_DoInit+0x9c>)
 80059d0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <_DoInit+0xa4>)
 80059d6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2210      	movs	r2, #16
 80059dc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3307      	adds	r3, #7
 80059f4:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <_DoInit+0xa8>)
 80059f6:	6810      	ldr	r0, [r2, #0]
 80059f8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80059fa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <_DoInit+0xac>)
 8005a02:	6810      	ldr	r0, [r2, #0]
 8005a04:	6018      	str	r0, [r3, #0]
 8005a06:	8891      	ldrh	r1, [r2, #4]
 8005a08:	7992      	ldrb	r2, [r2, #6]
 8005a0a:	8099      	strh	r1, [r3, #4]
 8005a0c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005a0e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005a18:	f3bf 8f5f 	dmb	sy
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20012f08 	.word	0x20012f08
 8005a2c:	080072e4 	.word	0x080072e4
 8005a30:	20012fb0 	.word	0x20012fb0
 8005a34:	200133b0 	.word	0x200133b0
 8005a38:	080072f0 	.word	0x080072f0
 8005a3c:	080072f4 	.word	0x080072f4

08005a40 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	; 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a4c:	4b3e      	ldr	r3, [pc, #248]	; (8005b48 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <SEGGER_RTT_ReadNoLock+0x1e>
 8005a5a:	f7ff ff99 	bl	8005990 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	3360      	adds	r3, #96	; 0x60
 8005a6a:	4a37      	ldr	r2, [pc, #220]	; (8005b48 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d92b      	bls.n	8005ae4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bf28      	it	cs
 8005a9e:	4613      	movcs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	4413      	add	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	6939      	ldr	r1, [r7, #16]
 8005ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ab2:	f001 fb73 	bl	800719c <memcpy>
    NumBytesRead += NumBytesRem;
 8005ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	4413      	add	r3, r2
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d101      	bne.n	8005ae4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4293      	cmp	r3, r2
 8005af2:	bf28      	it	cs
 8005af4:	4613      	movcs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d019      	beq.n	8005b32 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	4413      	add	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b0e:	f001 fb45 	bl	800719c <memcpy>
    NumBytesRead += NumBytesRem;
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b3c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	; 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20012f08 	.word	0x20012f08

08005b4c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005b5a:	4b3d      	ldr	r3, [pc, #244]	; (8005c50 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005b68:	f7ff ff12 	bl	8005990 <_DoInit>
  SEGGER_RTT_LOCK();
 8005b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b70:	f04f 0120 	mov.w	r1, #32
 8005b74:	f381 8811 	msr	BASEPRI, r1
 8005b78:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b7a:	4b35      	ldr	r3, [pc, #212]	; (8005c50 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005b7c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005b82:	6939      	ldr	r1, [r7, #16]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	440b      	add	r3, r1
 8005b92:	3304      	adds	r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	dbeb      	blt.n	8005b82 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005baa:	e000      	b.n	8005bae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005bac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	da3f      	bge.n	8005c38 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005bb8:	6939      	ldr	r1, [r7, #16]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	440b      	add	r3, r1
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005bcc:	6939      	ldr	r1, [r7, #16]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	440b      	add	r3, r1
 8005bdc:	3304      	adds	r3, #4
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005be2:	6939      	ldr	r1, [r7, #16]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	440b      	add	r3, r1
 8005bf0:	3320      	adds	r3, #32
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	440b      	add	r3, r1
 8005c04:	3328      	adds	r3, #40	; 0x28
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005c0a:	6939      	ldr	r1, [r7, #16]
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	3324      	adds	r3, #36	; 0x24
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005c1e:	6939      	ldr	r1, [r7, #16]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	4613      	mov	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	440b      	add	r3, r1
 8005c2c:	332c      	adds	r3, #44	; 0x2c
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c32:	f3bf 8f5f 	dmb	sy
 8005c36:	e002      	b.n	8005c3e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005c44:	69fb      	ldr	r3, [r7, #28]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20012f08 	.word	0x20012f08

08005c54 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c62:	4b33      	ldr	r3, [pc, #204]	; (8005d30 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005c70:	f7ff fe8e 	bl	8005990 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c74:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005c76:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d24d      	bcs.n	8005d20 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005c84:	f3ef 8311 	mrs	r3, BASEPRI
 8005c88:	f04f 0120 	mov.w	r1, #32
 8005c8c:	f381 8811 	msr	BASEPRI, r1
 8005c90:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d031      	beq.n	8005cfc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3360      	adds	r3, #96	; 0x60
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	3364      	adds	r3, #100	; 0x64
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005cc0:	6979      	ldr	r1, [r7, #20]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	440b      	add	r3, r1
 8005cce:	3368      	adds	r3, #104	; 0x68
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4413      	add	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3370      	adds	r3, #112	; 0x70
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005ce8:	6979      	ldr	r1, [r7, #20]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	440b      	add	r3, r1
 8005cf6:	336c      	adds	r3, #108	; 0x6c
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005cfc:	6979      	ldr	r1, [r7, #20]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	440b      	add	r3, r1
 8005d0a:	3374      	adds	r3, #116	; 0x74
 8005d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d10:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e002      	b.n	8005d26 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005d20:	f04f 33ff 	mov.w	r3, #4294967295
 8005d24:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005d26:	69fb      	ldr	r3, [r7, #28]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20012f08 	.word	0x20012f08

08005d34 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005d44:	e002      	b.n	8005d4c <_EncodeStr+0x18>
    Len++;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4413      	add	r3, r2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f6      	bne.n	8005d46 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d901      	bls.n	8005d64 <_EncodeStr+0x30>
    Len = Limit;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2bfe      	cmp	r3, #254	; 0xfe
 8005d68:	d806      	bhi.n	8005d78 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	60fa      	str	r2, [r7, #12]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e011      	b.n	8005d9c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	60fa      	str	r2, [r7, #12]
 8005d7e:	22ff      	movs	r2, #255	; 0xff
 8005d80:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	60fa      	str	r2, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	0a19      	lsrs	r1, r3, #8
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	60fa      	str	r2, [r7, #12]
 8005d98:	b2ca      	uxtb	r2, r1
 8005d9a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005da0:	e00a      	b.n	8005db8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	1c53      	adds	r3, r2, #1
 8005da6:	60bb      	str	r3, [r7, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	60f9      	str	r1, [r7, #12]
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	701a      	strb	r2, [r3, #0]
    n++;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	3301      	adds	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d3f0      	bcc.n	8005da2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005dee:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <_HandleIncomingPacket+0xe0>)
 8005df0:	7e1b      	ldrb	r3, [r3, #24]
 8005df2:	4618      	mov	r0, r3
 8005df4:	1cfb      	adds	r3, r7, #3
 8005df6:	2201      	movs	r2, #1
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f7ff fe21 	bl	8005a40 <SEGGER_RTT_ReadNoLock>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dd54      	ble.n	8005eb2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	2b80      	cmp	r3, #128	; 0x80
 8005e0c:	d032      	beq.n	8005e74 <_HandleIncomingPacket+0x8c>
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	dc42      	bgt.n	8005e98 <_HandleIncomingPacket+0xb0>
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	dc16      	bgt.n	8005e44 <_HandleIncomingPacket+0x5c>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dd3e      	ble.n	8005e98 <_HandleIncomingPacket+0xb0>
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d83b      	bhi.n	8005e98 <_HandleIncomingPacket+0xb0>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <_HandleIncomingPacket+0x40>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e4b 	.word	0x08005e4b
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e57 	.word	0x08005e57
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e63 	.word	0x08005e63
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	08005e6f 	.word	0x08005e6f
 8005e44:	2b7f      	cmp	r3, #127	; 0x7f
 8005e46:	d036      	beq.n	8005eb6 <_HandleIncomingPacket+0xce>
 8005e48:	e026      	b.n	8005e98 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005e4a:	f000 fba7 	bl	800659c <SEGGER_SYSVIEW_Start>
      break;
 8005e4e:	e037      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005e50:	f000 fc5e 	bl	8006710 <SEGGER_SYSVIEW_Stop>
      break;
 8005e54:	e034      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005e56:	f000 fe37 	bl	8006ac8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005e5a:	e031      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005e5c:	f000 fdfc 	bl	8006a58 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005e60:	e02e      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005e62:	f000 fc7b 	bl	800675c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005e66:	e02b      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005e68:	f001 f8ca 	bl	8007000 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005e6c:	e028      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005e6e:	f001 f8a9 	bl	8006fc4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005e72:	e025      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e74:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <_HandleIncomingPacket+0xe0>)
 8005e76:	7e1b      	ldrb	r3, [r3, #24]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	1cfb      	adds	r3, r7, #3
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f7ff fdde 	bl	8005a40 <SEGGER_RTT_ReadNoLock>
 8005e84:	4603      	mov	r3, r0
 8005e86:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	dd15      	ble.n	8005eba <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 f817 	bl	8006ec4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005e96:	e010      	b.n	8005eba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0e      	bge.n	8005ebe <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <_HandleIncomingPacket+0xe0>)
 8005ea2:	7e1b      	ldrb	r3, [r3, #24]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	1cfb      	adds	r3, r7, #3
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4619      	mov	r1, r3
 8005eac:	f7ff fdc8 	bl	8005a40 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005eb0:	e005      	b.n	8005ebe <_HandleIncomingPacket+0xd6>
    }
  }
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <_HandleIncomingPacket+0xd8>
      break;
 8005ebe:	bf00      	nop
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200153c8 	.word	0x200153c8

08005ecc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08c      	sub	sp, #48	; 0x30
 8005ed0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	3301      	adds	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee6:	e00b      	b.n	8005f00 <_TrySendOverflowPacket+0x34>
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	09db      	lsrs	r3, r3, #7
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	2b7f      	cmp	r3, #127	; 0x7f
 8005f04:	d8f0      	bhi.n	8005ee8 <_TrySendOverflowPacket+0x1c>
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f16:	4b25      	ldr	r3, [pc, #148]	; (8005fac <_TrySendOverflowPacket+0xe0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	623b      	str	r3, [r7, #32]
 8005f2e:	e00b      	b.n	8005f48 <_TrySendOverflowPacket+0x7c>
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1c59      	adds	r1, r3, #1
 8005f38:	6279      	str	r1, [r7, #36]	; 0x24
 8005f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	09db      	lsrs	r3, r3, #7
 8005f46:	623b      	str	r3, [r7, #32]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4c:	d8f0      	bhi.n	8005f30 <_TrySendOverflowPacket+0x64>
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	627a      	str	r2, [r7, #36]	; 0x24
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	4618      	mov	r0, r3
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f7fa f92e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f74:	4603      	mov	r3, r0
 8005f76:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e004      	b.n	8005f9c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	3301      	adds	r3, #1
 8005f98:	4a03      	ldr	r2, [pc, #12]	; (8005fa8 <_TrySendOverflowPacket+0xdc>)
 8005f9a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005f9c:	693b      	ldr	r3, [r7, #16]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3730      	adds	r7, #48	; 0x30
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200153c8 	.word	0x200153c8
 8005fac:	e0001004 	.word	0xe0001004

08005fb0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005fbc:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <_SendPacket+0x1c0>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d010      	beq.n	8005fe6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005fc4:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <_SendPacket+0x1c0>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80a3 	beq.w	8006114 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005fce:	4b68      	ldr	r3, [pc, #416]	; (8006170 <_SendPacket+0x1c0>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d109      	bne.n	8005fea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005fd6:	f7ff ff79 	bl	8005ecc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005fda:	4b65      	ldr	r3, [pc, #404]	; (8006170 <_SendPacket+0x1c0>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	f040 809a 	bne.w	8006118 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005fe4:	e001      	b.n	8005fea <_SendPacket+0x3a>
    goto Send;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <_SendPacket+0x3c>
Send:
 8005fea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b1f      	cmp	r3, #31
 8005ff0:	d809      	bhi.n	8006006 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	; (8006170 <_SendPacket+0x1c0>)
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 808b 	bne.w	800611c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b17      	cmp	r3, #23
 800600a:	d807      	bhi.n	800601c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e03d      	b.n	8006098 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b7f      	cmp	r3, #127	; 0x7f
 8006028:	d912      	bls.n	8006050 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	09da      	lsrs	r2, r3, #7
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3b01      	subs	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	3a01      	subs	r2, #1
 8006042:	60fa      	str	r2, [r7, #12]
 8006044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006048:	b2da      	uxtb	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e006      	b.n	800605e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3b01      	subs	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b7f      	cmp	r3, #127	; 0x7f
 8006062:	d912      	bls.n	800608a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	09da      	lsrs	r2, r3, #7
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3b01      	subs	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	3a01      	subs	r2, #1
 800607c:	60fa      	str	r2, [r7, #12]
 800607e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e006      	b.n	8006098 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b01      	subs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <_SendPacket+0x1c4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800609e:	4b34      	ldr	r3, [pc, #208]	; (8006170 <_SendPacket+0x1c0>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	623b      	str	r3, [r7, #32]
 80060b0:	e00b      	b.n	80060ca <_SendPacket+0x11a>
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	6279      	str	r1, [r7, #36]	; 0x24
 80060bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	09db      	lsrs	r3, r3, #7
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2b7f      	cmp	r3, #127	; 0x7f
 80060ce:	d8f0      	bhi.n	80060b2 <_SendPacket+0x102>
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	627a      	str	r2, [r7, #36]	; 0x24
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80060e0:	4b23      	ldr	r3, [pc, #140]	; (8006170 <_SendPacket+0x1c0>)
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	4618      	mov	r0, r3
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f7fa f86e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060f4:	4603      	mov	r3, r0
 80060f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060fe:	4a1c      	ldr	r2, [pc, #112]	; (8006170 <_SendPacket+0x1c0>)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	60d3      	str	r3, [r2, #12]
 8006104:	e00b      	b.n	800611e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <_SendPacket+0x1c0>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	b2da      	uxtb	r2, r3
 800610e:	4b18      	ldr	r3, [pc, #96]	; (8006170 <_SendPacket+0x1c0>)
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e004      	b.n	800611e <_SendPacket+0x16e>
    goto SendDone;
 8006114:	bf00      	nop
 8006116:	e002      	b.n	800611e <_SendPacket+0x16e>
      goto SendDone;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <_SendPacket+0x16e>
      goto SendDone;
 800611c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <_SendPacket+0x1c0>)
 8006120:	7e1b      	ldrb	r3, [r3, #24]
 8006122:	4619      	mov	r1, r3
 8006124:	4a14      	ldr	r2, [pc, #80]	; (8006178 <_SendPacket+0x1c8>)
 8006126:	460b      	mov	r3, r1
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	440b      	add	r3, r1
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	336c      	adds	r3, #108	; 0x6c
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <_SendPacket+0x1c0>)
 8006136:	7e1b      	ldrb	r3, [r3, #24]
 8006138:	4618      	mov	r0, r3
 800613a:	490f      	ldr	r1, [pc, #60]	; (8006178 <_SendPacket+0x1c8>)
 800613c:	4603      	mov	r3, r0
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	4403      	add	r3, r0
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	440b      	add	r3, r1
 8006146:	3370      	adds	r3, #112	; 0x70
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d00b      	beq.n	8006166 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <_SendPacket+0x1c0>)
 8006150:	789b      	ldrb	r3, [r3, #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <_SendPacket+0x1c0>)
 8006158:	2201      	movs	r2, #1
 800615a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800615c:	f7ff fe44 	bl	8005de8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <_SendPacket+0x1c0>)
 8006162:	2200      	movs	r2, #0
 8006164:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006166:	bf00      	nop
 8006168:	3728      	adds	r7, #40	; 0x28
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	200153c8 	.word	0x200153c8
 8006174:	e0001004 	.word	0xe0001004
 8006178:	20012f08 	.word	0x20012f08

0800617c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800618a:	2300      	movs	r3, #0
 800618c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006190:	4917      	ldr	r1, [pc, #92]	; (80061f0 <SEGGER_SYSVIEW_Init+0x74>)
 8006192:	4818      	ldr	r0, [pc, #96]	; (80061f4 <SEGGER_SYSVIEW_Init+0x78>)
 8006194:	f7ff fcda 	bl	8005b4c <SEGGER_RTT_AllocUpBuffer>
 8006198:	4603      	mov	r3, r0
 800619a:	b2da      	uxtb	r2, r3
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800619e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061a2:	785a      	ldrb	r2, [r3, #1]
 80061a4:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80061a8:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061aa:	7e1b      	ldrb	r3, [r3, #24]
 80061ac:	4618      	mov	r0, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2308      	movs	r3, #8
 80061b4:	4a11      	ldr	r2, [pc, #68]	; (80061fc <SEGGER_SYSVIEW_Init+0x80>)
 80061b6:	490f      	ldr	r1, [pc, #60]	; (80061f4 <SEGGER_SYSVIEW_Init+0x78>)
 80061b8:	f7ff fd4c 	bl	8005c54 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061be:	2200      	movs	r2, #0
 80061c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <SEGGER_SYSVIEW_Init+0x84>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80061ca:	4a0b      	ldr	r2, [pc, #44]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80061d0:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80061d6:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80061dc:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200133c0 	.word	0x200133c0
 80061f4:	080072fc 	.word	0x080072fc
 80061f8:	200153c8 	.word	0x200153c8
 80061fc:	200153c0 	.word	0x200153c0
 8006200:	e0001004 	.word	0xe0001004

08006204 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800620c:	4a04      	ldr	r2, [pc, #16]	; (8006220 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6113      	str	r3, [r2, #16]
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	200153c8 	.word	0x200153c8

08006224 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800622c:	f3ef 8311 	mrs	r3, BASEPRI
 8006230:	f04f 0120 	mov.w	r1, #32
 8006234:	f381 8811 	msr	BASEPRI, r1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	4808      	ldr	r0, [pc, #32]	; (800625c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800623c:	f7ff fdc7 	bl	8005dce <_PreparePacket>
 8006240:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68b8      	ldr	r0, [r7, #8]
 8006248:	f7ff feb2 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f383 8811 	msr	BASEPRI, r3
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	200153f8 	.word	0x200153f8

08006260 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800626a:	f3ef 8311 	mrs	r3, BASEPRI
 800626e:	f04f 0120 	mov.w	r1, #32
 8006272:	f381 8811 	msr	BASEPRI, r1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	4816      	ldr	r0, [pc, #88]	; (80062d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800627a:	f7ff fda8 	bl	8005dce <_PreparePacket>
 800627e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	61f9      	str	r1, [r7, #28]
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	61fa      	str	r2, [r7, #28]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6938      	ldr	r0, [r7, #16]
 80062c2:	f7ff fe75 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f383 8811 	msr	BASEPRI, r3
}
 80062cc:	bf00      	nop
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200153f8 	.word	0x200153f8

080062d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062e4:	f3ef 8311 	mrs	r3, BASEPRI
 80062e8:	f04f 0120 	mov.w	r1, #32
 80062ec:	f381 8811 	msr	BASEPRI, r1
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	4825      	ldr	r0, [pc, #148]	; (8006388 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80062f4:	f7ff fd6b 	bl	8005dce <_PreparePacket>
 80062f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800632c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	e00b      	b.n	8006358 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	6279      	str	r1, [r7, #36]	; 0x24
 800634a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	623b      	str	r3, [r7, #32]
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	2b7f      	cmp	r3, #127	; 0x7f
 800635c:	d8f0      	bhi.n	8006340 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	627a      	str	r2, [r7, #36]	; 0x24
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	6979      	ldr	r1, [r7, #20]
 8006372:	69b8      	ldr	r0, [r7, #24]
 8006374:	f7ff fe1c 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
 8006380:	3730      	adds	r7, #48	; 0x30
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200153f8 	.word	0x200153f8

0800638c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b08e      	sub	sp, #56	; 0x38
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800639a:	f3ef 8311 	mrs	r3, BASEPRI
 800639e:	f04f 0120 	mov.w	r1, #32
 80063a2:	f381 8811 	msr	BASEPRI, r1
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	4832      	ldr	r0, [pc, #200]	; (8006474 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80063aa:	f7ff fd10 	bl	8005dce <_PreparePacket>
 80063ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
 80063bc:	e00b      	b.n	80063d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	6379      	str	r1, [r7, #52]	; 0x34
 80063c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	09db      	lsrs	r3, r3, #7
 80063d4:	633b      	str	r3, [r7, #48]	; 0x30
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2b7f      	cmp	r3, #127	; 0x7f
 80063da:	d8f0      	bhi.n	80063be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	637a      	str	r2, [r7, #52]	; 0x34
 80063e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f4:	e00b      	b.n	800640e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	1c59      	adds	r1, r3, #1
 80063fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	09db      	lsrs	r3, r3, #7
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	2b7f      	cmp	r3, #127	; 0x7f
 8006412:	d8f0      	bhi.n	80063f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800641a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	e00b      	b.n	8006446 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	6279      	str	r1, [r7, #36]	; 0x24
 8006438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	2b7f      	cmp	r3, #127	; 0x7f
 800644a:	d8f0      	bhi.n	800642e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	627a      	str	r2, [r7, #36]	; 0x24
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	6979      	ldr	r1, [r7, #20]
 8006460:	69b8      	ldr	r0, [r7, #24]
 8006462:	f7ff fda5 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f383 8811 	msr	BASEPRI, r3
}
 800646c:	bf00      	nop
 800646e:	3738      	adds	r7, #56	; 0x38
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	200153f8 	.word	0x200153f8

08006478 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b090      	sub	sp, #64	; 0x40
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006486:	f3ef 8311 	mrs	r3, BASEPRI
 800648a:	f04f 0120 	mov.w	r1, #32
 800648e:	f381 8811 	msr	BASEPRI, r1
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	4840      	ldr	r0, [pc, #256]	; (8006598 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006496:	f7ff fc9a 	bl	8005dce <_PreparePacket>
 800649a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064a8:	e00b      	b.n	80064c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	1c59      	adds	r1, r3, #1
 80064b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80064b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	09db      	lsrs	r3, r3, #7
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b7f      	cmp	r3, #127	; 0x7f
 80064c6:	d8f0      	bhi.n	80064aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80064c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	633b      	str	r3, [r7, #48]	; 0x30
 80064e0:	e00b      	b.n	80064fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	1c59      	adds	r1, r3, #1
 80064ea:	6379      	str	r1, [r7, #52]	; 0x34
 80064ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	09db      	lsrs	r3, r3, #7
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b7f      	cmp	r3, #127	; 0x7f
 80064fe:	d8f0      	bhi.n	80064e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	637a      	str	r2, [r7, #52]	; 0x34
 8006506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
 8006518:	e00b      	b.n	8006532 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	b2da      	uxtb	r2, r3
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	1c59      	adds	r1, r3, #1
 8006522:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	09db      	lsrs	r3, r3, #7
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	2b7f      	cmp	r3, #127	; 0x7f
 8006536:	d8f0      	bhi.n	800651a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800653e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
 800654c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	e00b      	b.n	800656a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	6279      	str	r1, [r7, #36]	; 0x24
 800655c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	09db      	lsrs	r3, r3, #7
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	2b7f      	cmp	r3, #127	; 0x7f
 800656e:	d8f0      	bhi.n	8006552 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	627a      	str	r2, [r7, #36]	; 0x24
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	6979      	ldr	r1, [r7, #20]
 8006584:	69b8      	ldr	r0, [r7, #24]
 8006586:	f7ff fd13 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	f383 8811 	msr	BASEPRI, r3
}
 8006590:	bf00      	nop
 8006592:	3740      	adds	r7, #64	; 0x40
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200153f8 	.word	0x200153f8

0800659c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08c      	sub	sp, #48	; 0x30
 80065a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80065a2:	4b58      	ldr	r3, [pc, #352]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80065a8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ac:	f04f 0120 	mov.w	r1, #32
 80065b0:	f381 8811 	msr	BASEPRI, r1
 80065b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80065b6:	4b53      	ldr	r3, [pc, #332]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	220a      	movs	r2, #10
 80065bc:	4952      	ldr	r1, [pc, #328]	; (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 80065be:	4618      	mov	r0, r3
 80065c0:	f7f9 fe06 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80065ca:	200a      	movs	r0, #10
 80065cc:	f7ff fe2a 	bl	8006224 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d0:	f3ef 8311 	mrs	r3, BASEPRI
 80065d4:	f04f 0120 	mov.w	r1, #32
 80065d8:	f381 8811 	msr	BASEPRI, r1
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	484b      	ldr	r0, [pc, #300]	; (800670c <SEGGER_SYSVIEW_Start+0x170>)
 80065e0:	f7ff fbf5 	bl	8005dce <_PreparePacket>
 80065e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ee:	4b45      	ldr	r3, [pc, #276]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f4:	e00b      	b.n	800660e <SEGGER_SYSVIEW_Start+0x72>
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	1c59      	adds	r1, r3, #1
 80065fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	09db      	lsrs	r3, r3, #7
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2b7f      	cmp	r3, #127	; 0x7f
 8006612:	d8f0      	bhi.n	80065f6 <SEGGER_SYSVIEW_Start+0x5a>
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
 8006628:	4b36      	ldr	r3, [pc, #216]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	e00b      	b.n	8006648 <SEGGER_SYSVIEW_Start+0xac>
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	b2da      	uxtb	r2, r3
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	6279      	str	r1, [r7, #36]	; 0x24
 800663a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	09db      	lsrs	r3, r3, #7
 8006646:	623b      	str	r3, [r7, #32]
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b7f      	cmp	r3, #127	; 0x7f
 800664c:	d8f0      	bhi.n	8006630 <SEGGER_SYSVIEW_Start+0x94>
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	627a      	str	r2, [r7, #36]	; 0x24
 8006654:	6a3a      	ldr	r2, [r7, #32]
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	4b28      	ldr	r3, [pc, #160]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e00b      	b.n	8006682 <SEGGER_SYSVIEW_Start+0xe6>
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	61f9      	str	r1, [r7, #28]
 8006674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	09db      	lsrs	r3, r3, #7
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b7f      	cmp	r3, #127	; 0x7f
 8006686:	d8f0      	bhi.n	800666a <SEGGER_SYSVIEW_Start+0xce>
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	61fa      	str	r2, [r7, #28]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	e00b      	b.n	80066ba <SEGGER_SYSVIEW_Start+0x11e>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	6179      	str	r1, [r7, #20]
 80066ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b7f      	cmp	r3, #127	; 0x7f
 80066be:	d8f0      	bhi.n	80066a2 <SEGGER_SYSVIEW_Start+0x106>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	617a      	str	r2, [r7, #20]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066d0:	2218      	movs	r2, #24
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fc6b 	bl	8005fb0 <_SendPacket>
      RECORD_END();
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066e0:	4b08      	ldr	r3, [pc, #32]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80066e8:	4b06      	ldr	r3, [pc, #24]	; (8006704 <SEGGER_SYSVIEW_Start+0x168>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80066ee:	f000 f9eb 	bl	8006ac8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80066f2:	f000 f9b1 	bl	8006a58 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80066f6:	f000 fc83 	bl	8007000 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80066fa:	bf00      	nop
 80066fc:	3730      	adds	r7, #48	; 0x30
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	200153c8 	.word	0x200153c8
 8006708:	08007324 	.word	0x08007324
 800670c:	200153f8 	.word	0x200153f8

08006710 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006716:	f3ef 8311 	mrs	r3, BASEPRI
 800671a:	f04f 0120 	mov.w	r1, #32
 800671e:	f381 8811 	msr	BASEPRI, r1
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	480b      	ldr	r0, [pc, #44]	; (8006754 <SEGGER_SYSVIEW_Stop+0x44>)
 8006726:	f7ff fb52 	bl	8005dce <_PreparePacket>
 800672a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <SEGGER_SYSVIEW_Stop+0x48>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006734:	220b      	movs	r2, #11
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6838      	ldr	r0, [r7, #0]
 800673a:	f7ff fc39 	bl	8005fb0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <SEGGER_SYSVIEW_Stop+0x48>)
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f383 8811 	msr	BASEPRI, r3
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200153f8 	.word	0x200153f8
 8006758:	200153c8 	.word	0x200153c8

0800675c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006762:	f3ef 8311 	mrs	r3, BASEPRI
 8006766:	f04f 0120 	mov.w	r1, #32
 800676a:	f381 8811 	msr	BASEPRI, r1
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	4845      	ldr	r0, [pc, #276]	; (8006888 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006772:	f7ff fb2c 	bl	8005dce <_PreparePacket>
 8006776:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006780:	4b42      	ldr	r3, [pc, #264]	; (800688c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
 8006786:	e00b      	b.n	80067a0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	1c59      	adds	r1, r3, #1
 8006790:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	09db      	lsrs	r3, r3, #7
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	2b7f      	cmp	r3, #127	; 0x7f
 80067a4:	d8f0      	bhi.n	8006788 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ba:	4b34      	ldr	r3, [pc, #208]	; (800688c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	e00b      	b.n	80067da <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1c59      	adds	r1, r3, #1
 80067ca:	6279      	str	r1, [r7, #36]	; 0x24
 80067cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	09db      	lsrs	r3, r3, #7
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	2b7f      	cmp	r3, #127	; 0x7f
 80067de:	d8f0      	bhi.n	80067c2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	627a      	str	r2, [r7, #36]	; 0x24
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e00b      	b.n	8006814 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	61f9      	str	r1, [r7, #28]
 8006806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	09db      	lsrs	r3, r3, #7
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b7f      	cmp	r3, #127	; 0x7f
 8006818:	d8f0      	bhi.n	80067fc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	61fa      	str	r2, [r7, #28]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	e00b      	b.n	800684c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	1c59      	adds	r1, r3, #1
 800683c:	6179      	str	r1, [r7, #20]
 800683e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	09db      	lsrs	r3, r3, #7
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b7f      	cmp	r3, #127	; 0x7f
 8006850:	d8f0      	bhi.n	8006834 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	617a      	str	r2, [r7, #20]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006862:	2218      	movs	r2, #24
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	68b8      	ldr	r0, [r7, #8]
 8006868:	f7ff fba2 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	4798      	blx	r3
  }
}
 8006880:	bf00      	nop
 8006882:	3730      	adds	r7, #48	; 0x30
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200153f8 	.word	0x200153f8
 800688c:	200153c8 	.word	0x200153c8

08006890 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b092      	sub	sp, #72	; 0x48
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006898:	f3ef 8311 	mrs	r3, BASEPRI
 800689c:	f04f 0120 	mov.w	r1, #32
 80068a0:	f381 8811 	msr	BASEPRI, r1
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	486a      	ldr	r0, [pc, #424]	; (8006a50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80068a8:	f7ff fa91 	bl	8005dce <_PreparePacket>
 80068ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	647b      	str	r3, [r7, #68]	; 0x44
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b66      	ldr	r3, [pc, #408]	; (8006a54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	643b      	str	r3, [r7, #64]	; 0x40
 80068c2:	e00b      	b.n	80068dc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80068c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	6479      	str	r1, [r7, #68]	; 0x44
 80068ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d8:	09db      	lsrs	r3, r3, #7
 80068da:	643b      	str	r3, [r7, #64]	; 0x40
 80068dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068de:	2b7f      	cmp	r3, #127	; 0x7f
 80068e0:	d8f0      	bhi.n	80068c4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80068e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	647a      	str	r2, [r7, #68]	; 0x44
 80068e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068fc:	e00b      	b.n	8006916 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006908:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	2b7f      	cmp	r3, #127	; 0x7f
 800691a:	d8f0      	bhi.n	80068fe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800691c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	4619      	mov	r1, r3
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff f9fd 	bl	8005d34 <_EncodeStr>
 800693a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800693c:	2209      	movs	r2, #9
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	6938      	ldr	r0, [r7, #16]
 8006942:	f7ff fb35 	bl	8005fb0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	637b      	str	r3, [r7, #52]	; 0x34
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b40      	ldr	r3, [pc, #256]	; (8006a54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	633b      	str	r3, [r7, #48]	; 0x30
 800695a:	e00b      	b.n	8006974 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	b2da      	uxtb	r2, r3
 8006960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	6379      	str	r1, [r7, #52]	; 0x34
 8006966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	09db      	lsrs	r3, r3, #7
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b7f      	cmp	r3, #127	; 0x7f
 8006978:	d8f0      	bhi.n	800695c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	637a      	str	r2, [r7, #52]	; 0x34
 8006980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
 8006994:	e00b      	b.n	80069ae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	b2da      	uxtb	r2, r3
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	1c59      	adds	r1, r3, #1
 800699e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	09db      	lsrs	r3, r3, #7
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	2b7f      	cmp	r3, #127	; 0x7f
 80069b2:	d8f0      	bhi.n	8006996 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	623b      	str	r3, [r7, #32]
 80069ce:	e00b      	b.n	80069e8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	6279      	str	r1, [r7, #36]	; 0x24
 80069da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	09db      	lsrs	r3, r3, #7
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2b7f      	cmp	r3, #127	; 0x7f
 80069ec:	d8f0      	bhi.n	80069d0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	627a      	str	r2, [r7, #36]	; 0x24
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e00b      	b.n	8006a20 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	61f9      	str	r1, [r7, #28]
 8006a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	09db      	lsrs	r3, r3, #7
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b7f      	cmp	r3, #127	; 0x7f
 8006a24:	d8f0      	bhi.n	8006a08 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	61fa      	str	r2, [r7, #28]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006a36:	2215      	movs	r2, #21
 8006a38:	68f9      	ldr	r1, [r7, #12]
 8006a3a:	6938      	ldr	r0, [r7, #16]
 8006a3c:	f7ff fab8 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f383 8811 	msr	BASEPRI, r3
}
 8006a46:	bf00      	nop
 8006a48:	3748      	adds	r7, #72	; 0x48
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200153f8 	.word	0x200153f8
 8006a54:	200153c8 	.word	0x200153c8

08006a58 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a6e:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4798      	blx	r3
  }
}
 8006a76:	bf00      	nop
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200153c8 	.word	0x200153c8

08006a80 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a88:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8c:	f04f 0120 	mov.w	r1, #32
 8006a90:	f381 8811 	msr	BASEPRI, r1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	480b      	ldr	r0, [pc, #44]	; (8006ac4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a98:	f7ff f999 	bl	8005dce <_PreparePacket>
 8006a9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	6938      	ldr	r0, [r7, #16]
 8006aa4:	f7ff f946 	bl	8005d34 <_EncodeStr>
 8006aa8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006aaa:	220e      	movs	r2, #14
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7ff fa7e 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f383 8811 	msr	BASEPRI, r3
}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	200153f8 	.word	0x200153f8

08006ac8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ace:	4b15      	ldr	r3, [pc, #84]	; (8006b24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01a      	beq.n	8006b0c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d015      	beq.n	8006b0c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ae0:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4798      	blx	r3
 8006ae8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006aec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	000a      	movs	r2, r1
 8006afc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006afe:	4613      	mov	r3, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	4621      	mov	r1, r4
 8006b04:	200d      	movs	r0, #13
 8006b06:	f7ff fbe7 	bl	80062d8 <SEGGER_SYSVIEW_RecordU32x2>
 8006b0a:	e006      	b.n	8006b1a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4619      	mov	r1, r3
 8006b12:	200c      	movs	r0, #12
 8006b14:	f7ff fba4 	bl	8006260 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}
 8006b22:	bf00      	nop
 8006b24:	200153c8 	.word	0x200153c8
 8006b28:	e0001004 	.word	0xe0001004

08006b2c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	4819      	ldr	r0, [pc, #100]	; (8006ba8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006b42:	f7ff f944 	bl	8005dce <_PreparePacket>
 8006b46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006b4c:	4b17      	ldr	r3, [pc, #92]	; (8006bac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b54:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	e00b      	b.n	8006b78 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	6179      	str	r1, [r7, #20]
 8006b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	09db      	lsrs	r3, r3, #7
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	d8f0      	bhi.n	8006b60 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	617a      	str	r2, [r7, #20]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b8e:	2202      	movs	r2, #2
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	68b8      	ldr	r0, [r7, #8]
 8006b94:	f7ff fa0c 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f383 8811 	msr	BASEPRI, r3
}
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200153f8 	.word	0x200153f8
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bba:	f04f 0120 	mov.w	r1, #32
 8006bbe:	f381 8811 	msr	BASEPRI, r1
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	4807      	ldr	r0, [pc, #28]	; (8006be4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006bc6:	f7ff f902 	bl	8005dce <_PreparePacket>
 8006bca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006bcc:	2203      	movs	r2, #3
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6838      	ldr	r0, [r7, #0]
 8006bd2:	f7ff f9ed 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f383 8811 	msr	BASEPRI, r3
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	200153f8 	.word	0x200153f8

08006be8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bee:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf2:	f04f 0120 	mov.w	r1, #32
 8006bf6:	f381 8811 	msr	BASEPRI, r1
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	4807      	ldr	r0, [pc, #28]	; (8006c1c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006bfe:	f7ff f8e6 	bl	8005dce <_PreparePacket>
 8006c02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c04:	2212      	movs	r2, #18
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6838      	ldr	r0, [r7, #0]
 8006c0a:	f7ff f9d1 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f383 8811 	msr	BASEPRI, r3
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	200153f8 	.word	0x200153f8

08006c20 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c26:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2a:	f04f 0120 	mov.w	r1, #32
 8006c2e:	f381 8811 	msr	BASEPRI, r1
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	4807      	ldr	r0, [pc, #28]	; (8006c54 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006c36:	f7ff f8ca 	bl	8005dce <_PreparePacket>
 8006c3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006c3c:	2211      	movs	r2, #17
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6838      	ldr	r0, [r7, #0]
 8006c42:	f7ff f9b5 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f383 8811 	msr	BASEPRI, r3
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	200153f8 	.word	0x200153f8

08006c58 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c60:	f3ef 8311 	mrs	r3, BASEPRI
 8006c64:	f04f 0120 	mov.w	r1, #32
 8006c68:	f381 8811 	msr	BASEPRI, r1
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	4819      	ldr	r0, [pc, #100]	; (8006cd4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c70:	f7ff f8ad 	bl	8005dce <_PreparePacket>
 8006c74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c7a:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e00b      	b.n	8006ca6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	61f9      	str	r1, [r7, #28]
 8006c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	09db      	lsrs	r3, r3, #7
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8006caa:	d8f0      	bhi.n	8006c8e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	61fa      	str	r2, [r7, #28]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6938      	ldr	r0, [r7, #16]
 8006cc2:	f7ff f975 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f383 8811 	msr	BASEPRI, r3
}
 8006ccc:	bf00      	nop
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	200153f8 	.word	0x200153f8
 8006cd8:	200153c8 	.word	0x200153c8

08006cdc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce8:	f04f 0120 	mov.w	r1, #32
 8006cec:	f381 8811 	msr	BASEPRI, r1
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	4819      	ldr	r0, [pc, #100]	; (8006d58 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006cf4:	f7ff f86b 	bl	8005dce <_PreparePacket>
 8006cf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cfe:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e00b      	b.n	8006d2a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	61f9      	str	r1, [r7, #28]
 8006d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2e:	d8f0      	bhi.n	8006d12 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	61fa      	str	r2, [r7, #28]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006d40:	2204      	movs	r2, #4
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	6938      	ldr	r0, [r7, #16]
 8006d46:	f7ff f933 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f383 8811 	msr	BASEPRI, r3
}
 8006d50:	bf00      	nop
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200153f8 	.word	0x200153f8
 8006d5c:	200153c8 	.word	0x200153c8

08006d60 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d68:	f3ef 8311 	mrs	r3, BASEPRI
 8006d6c:	f04f 0120 	mov.w	r1, #32
 8006d70:	f381 8811 	msr	BASEPRI, r1
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	4819      	ldr	r0, [pc, #100]	; (8006ddc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d78:	f7ff f829 	bl	8005dce <_PreparePacket>
 8006d7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d82:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e00b      	b.n	8006dae <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	1c59      	adds	r1, r3, #1
 8006d9e:	61f9      	str	r1, [r7, #28]
 8006da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	09db      	lsrs	r3, r3, #7
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b7f      	cmp	r3, #127	; 0x7f
 8006db2:	d8f0      	bhi.n	8006d96 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	61fa      	str	r2, [r7, #28]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006dc4:	2206      	movs	r2, #6
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	6938      	ldr	r0, [r7, #16]
 8006dca:	f7ff f8f1 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f383 8811 	msr	BASEPRI, r3
}
 8006dd4:	bf00      	nop
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200153f8 	.word	0x200153f8
 8006de0:	200153c8 	.word	0x200153c8

08006de4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dee:	f3ef 8311 	mrs	r3, BASEPRI
 8006df2:	f04f 0120 	mov.w	r1, #32
 8006df6:	f381 8811 	msr	BASEPRI, r1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	4827      	ldr	r0, [pc, #156]	; (8006e9c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006dfe:	f7fe ffe6 	bl	8005dce <_PreparePacket>
 8006e02:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	e00b      	b.n	8006e34 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	1c59      	adds	r1, r3, #1
 8006e24:	6279      	str	r1, [r7, #36]	; 0x24
 8006e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	09db      	lsrs	r3, r3, #7
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	2b7f      	cmp	r3, #127	; 0x7f
 8006e38:	d8f0      	bhi.n	8006e1c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e00b      	b.n	8006e6c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	61f9      	str	r1, [r7, #28]
 8006e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	09db      	lsrs	r3, r3, #7
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d8f0      	bhi.n	8006e54 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	61fa      	str	r2, [r7, #28]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006e82:	2207      	movs	r2, #7
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f7ff f892 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f383 8811 	msr	BASEPRI, r3
}
 8006e92:	bf00      	nop
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200153f8 	.word	0x200153f8
 8006ea0:	200153c8 	.word	0x200153c8

08006ea4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	1ad3      	subs	r3, r2, r3
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	200153c8 	.word	0x200153c8

08006ec4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08c      	sub	sp, #48	; 0x30
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ece:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d06d      	beq.n	8006fb2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006ed6:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006edc:	2300      	movs	r3, #0
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee0:	e008      	b.n	8006ef4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d3f2      	bcc.n	8006ee2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006efc:	e000      	b.n	8006f00 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006efe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d055      	beq.n	8006fb2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f06:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0a:	f04f 0120 	mov.w	r1, #32
 8006f0e:	f381 8811 	msr	BASEPRI, r1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	482a      	ldr	r0, [pc, #168]	; (8006fc0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006f16:	f7fe ff5a 	bl	8005dce <_PreparePacket>
 8006f1a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	623b      	str	r3, [r7, #32]
 8006f28:	e00b      	b.n	8006f42 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	1c59      	adds	r1, r3, #1
 8006f32:	6279      	str	r1, [r7, #36]	; 0x24
 8006f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	09db      	lsrs	r3, r3, #7
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	2b7f      	cmp	r3, #127	; 0x7f
 8006f46:	d8f0      	bhi.n	8006f2a <SEGGER_SYSVIEW_SendModule+0x66>
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f4e:	6a3a      	ldr	r2, [r7, #32]
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	61fb      	str	r3, [r7, #28]
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e00b      	b.n	8006f7c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	1c59      	adds	r1, r3, #1
 8006f6c:	61f9      	str	r1, [r7, #28]
 8006f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	09db      	lsrs	r3, r3, #7
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f80:	d8f0      	bhi.n	8006f64 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	61fa      	str	r2, [r7, #28]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7fe feca 	bl	8005d34 <_EncodeStr>
 8006fa0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006fa2:	2216      	movs	r2, #22
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	6938      	ldr	r0, [r7, #16]
 8006fa8:	f7ff f802 	bl	8005fb0 <_SendPacket>
      RECORD_END();
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3730      	adds	r7, #48	; 0x30
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	200153f0 	.word	0x200153f0
 8006fc0:	200153f8 	.word	0x200153f8

08006fc4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006fca:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00f      	beq.n	8006ff2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f2      	bne.n	8006fd8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200153f0 	.word	0x200153f0

08007000 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007006:	f3ef 8311 	mrs	r3, BASEPRI
 800700a:	f04f 0120 	mov.w	r1, #32
 800700e:	f381 8811 	msr	BASEPRI, r1
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	4817      	ldr	r0, [pc, #92]	; (8007074 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007016:	f7fe feda 	bl	8005dce <_PreparePacket>
 800701a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	4b14      	ldr	r3, [pc, #80]	; (8007078 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	e00b      	b.n	8007044 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	b2da      	uxtb	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1c59      	adds	r1, r3, #1
 8007034:	6179      	str	r1, [r7, #20]
 8007036:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	09db      	lsrs	r3, r3, #7
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2b7f      	cmp	r3, #127	; 0x7f
 8007048:	d8f0      	bhi.n	800702c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	617a      	str	r2, [r7, #20]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800705a:	221b      	movs	r2, #27
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	68b8      	ldr	r0, [r7, #8]
 8007060:	f7fe ffa6 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f383 8811 	msr	BASEPRI, r3
}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200153f8 	.word	0x200153f8
 8007078:	200153f4 	.word	0x200153f4

0800707c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	; 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007084:	f3ef 8311 	mrs	r3, BASEPRI
 8007088:	f04f 0120 	mov.w	r1, #32
 800708c:	f381 8811 	msr	BASEPRI, r1
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	4827      	ldr	r0, [pc, #156]	; (8007130 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007094:	f7fe fe9b 	bl	8005dce <_PreparePacket>
 8007098:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	6938      	ldr	r0, [r7, #16]
 80070a0:	f7fe fe48 	bl	8005d34 <_EncodeStr>
 80070a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
 80070aa:	2301      	movs	r3, #1
 80070ac:	623b      	str	r3, [r7, #32]
 80070ae:	e00b      	b.n	80070c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	6279      	str	r1, [r7, #36]	; 0x24
 80070ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	09db      	lsrs	r3, r3, #7
 80070c6:	623b      	str	r3, [r7, #32]
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	2b7f      	cmp	r3, #127	; 0x7f
 80070cc:	d8f0      	bhi.n	80070b0 <SEGGER_SYSVIEW_Warn+0x34>
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	627a      	str	r2, [r7, #36]	; 0x24
 80070d4:	6a3a      	ldr	r2, [r7, #32]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	61fb      	str	r3, [r7, #28]
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	e00b      	b.n	8007100 <SEGGER_SYSVIEW_Warn+0x84>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	61f9      	str	r1, [r7, #28]
 80070f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	09db      	lsrs	r3, r3, #7
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b7f      	cmp	r3, #127	; 0x7f
 8007104:	d8f0      	bhi.n	80070e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	61fa      	str	r2, [r7, #28]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007116:	221a      	movs	r2, #26
 8007118:	68f9      	ldr	r1, [r7, #12]
 800711a:	6938      	ldr	r0, [r7, #16]
 800711c:	f7fe ff48 	bl	8005fb0 <_SendPacket>
  RECORD_END();
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f383 8811 	msr	BASEPRI, r3
}
 8007126:	bf00      	nop
 8007128:	3728      	adds	r7, #40	; 0x28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200153f8 	.word	0x200153f8

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4d0d      	ldr	r5, [pc, #52]	; (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	; (8007170 <__libc_init_array+0x3c>)
 800713a:	1b64      	subs	r4, r4, r5
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2600      	movs	r6, #0
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4d0b      	ldr	r5, [pc, #44]	; (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	; (8007178 <__libc_init_array+0x44>)
 8007148:	f000 f83e 	bl	80071c8 <_init>
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2600      	movs	r6, #0
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f855 3b04 	ldr.w	r3, [r5], #4
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f855 3b04 	ldr.w	r3, [r5], #4
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	08007338 	.word	0x08007338
 8007170:	08007338 	.word	0x08007338
 8007174:	08007338 	.word	0x08007338
 8007178:	0800733c 	.word	0x0800733c

0800717c <memcmp>:
 800717c:	b510      	push	{r4, lr}
 800717e:	3901      	subs	r1, #1
 8007180:	4402      	add	r2, r0
 8007182:	4290      	cmp	r0, r2
 8007184:	d101      	bne.n	800718a <memcmp+0xe>
 8007186:	2000      	movs	r0, #0
 8007188:	e005      	b.n	8007196 <memcmp+0x1a>
 800718a:	7803      	ldrb	r3, [r0, #0]
 800718c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007190:	42a3      	cmp	r3, r4
 8007192:	d001      	beq.n	8007198 <memcmp+0x1c>
 8007194:	1b18      	subs	r0, r3, r4
 8007196:	bd10      	pop	{r4, pc}
 8007198:	3001      	adds	r0, #1
 800719a:	e7f2      	b.n	8007182 <memcmp+0x6>

0800719c <memcpy>:
 800719c:	440a      	add	r2, r1
 800719e:	4291      	cmp	r1, r2
 80071a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a4:	d100      	bne.n	80071a8 <memcpy+0xc>
 80071a6:	4770      	bx	lr
 80071a8:	b510      	push	{r4, lr}
 80071aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b2:	4291      	cmp	r1, r2
 80071b4:	d1f9      	bne.n	80071aa <memcpy+0xe>
 80071b6:	bd10      	pop	{r4, pc}

080071b8 <memset>:
 80071b8:	4402      	add	r2, r0
 80071ba:	4603      	mov	r3, r0
 80071bc:	4293      	cmp	r3, r2
 80071be:	d100      	bne.n	80071c2 <memset+0xa>
 80071c0:	4770      	bx	lr
 80071c2:	f803 1b01 	strb.w	r1, [r3], #1
 80071c6:	e7f9      	b.n	80071bc <memset+0x4>

080071c8 <_init>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr

080071d4 <_fini>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr
